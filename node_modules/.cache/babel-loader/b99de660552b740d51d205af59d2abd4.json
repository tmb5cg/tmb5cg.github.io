{"ast":null,"code":"var _jsxFileName = \"/Users/tucker/Documents/GitHub/tmb5cg.github.io/src/components/FreeTimeFinder/CalendarOutput.js\";\nimport React from 'react';\nimport Calendar from './Calendar.js';\nimport format from \"date-fns/format\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CalendarOutput = props => {\n  const allStartTimes = [];\n  const allEndTimes = [];\n  const busyBlocksToAdd = [];\n\n  const fetchTest = () => {\n    // Format start date to 8am\n    var start = new Date(props.startDate);\n    start.setHours(8);\n    start.setMinutes(0);\n    start.setSeconds(0);\n    start = start.toISOString(); // Format end date to 8 pm\n\n    var end = new Date(props.startDate);\n    end.setHours(20);\n    end.setMinutes(0);\n    end.setSeconds(0);\n    end = end.toISOString();\n    console.log(start);\n    console.log(end); // Build request body\n\n    const request = {};\n    request.timeMin = start;\n    request.timeMax = end;\n    request.timeZone = \"EST\"; // Create calendars object\n\n    let cals = [];\n\n    for (let i = 0; i < props.selectedCalendars.length; i++) {\n      let calObj = {};\n      calObj.id = props.selectedCalendars[i];\n      cals.push(calObj);\n    }\n\n    request.items = cals;\n    let num_days = props.endDate.getDate() - props.startDate.getDate(); // for each day in between input dates, add event\n    // day1 8am 830am, 8pm to day2 8am\n\n    for (let x = 0; x < num_days; x++) {\n      day = props.startDate.getDate();\n      curDateDay = day + x;\n      inputDate = props.startDate; //appendPre(curDateDay)\n\n      morningBusyStart = new Date();\n      morningBusyStart.setDate(curDateDay);\n      morningBusyStart.setHours(8);\n      morningBusyStart.setMinutes(0);\n      morningBusyStart.setSeconds(0);\n      morningBusyStart.setFullYear(inputDate.getFullYear());\n      morningBusyEnd = new Date();\n      morningBusyEnd.setDate(curDateDay);\n      morningBusyEnd.setHours(8);\n      morningBusyEnd.setMinutes(30);\n      morningBusyEnd.setSeconds(0);\n      morningBusyEnd.setFullYear(inputDate.getFullYear());\n      nightBusyStart = new Date();\n      nightBusyStart.setDate(curDateDay);\n      nightBusyStart.setHours(20);\n      nightBusyStart.setMinutes(0);\n      nightBusyStart.setSeconds(0);\n      nightBusyStart.setFullYear(inputDate.getFullYear());\n      nightBusyEnd = new Date();\n      nightBusyEnd.setDate(curDateDay);\n      nightBusyEnd.setHours(20);\n      nightBusyEnd.setMinutes(30);\n      nightBusyEnd.setSeconds(0);\n      nightBusyEnd.setFullYear(inputDate.getFullYear()); // prettyStartTime = morningBusyStart.toLocaleString('en-US', { timeZone: 'EST' });\n      // prettyEndTime = morningBusyEnd.toLocaleString('en-US', { timeZone: 'EST' });\n\n      var morningBusyStart_formatted = {\n        date: morningBusyStart\n      };\n      var morningBusyEnd_formatted = {\n        date: morningBusyEnd\n      };\n      var nightBusyStart_formatted = {\n        date: nightBusyStart\n      };\n      var nightBusyEnd_formatted = {\n        date: nightBusyEnd\n      };\n      allStartTimes.push(morningBusyStart_formatted);\n      allEndTimes.push(morningBusyEnd_formatted);\n      allStartTimes.push(nightBusyStart_formatted);\n      allEndTimes.push(nightBusyEnd_formatted);\n      timecombo = [morningBusyStart, morningBusyEnd];\n      busyBlocksToAdd.push(timecombo);\n    }\n\n    return freeRequest = gapi.client.calendar.freebusy.query(request).then(function (response) {\n      console.log(\"Frebusy response: \", response);\n      console.log(\"Frebusy response2: \", response.result);\n\n      for (let k = 0; k < props.selectedCalendars.length; k++) {\n        var curCal = props.selectedCalendars[k];\n        console.log(\"Current calendar: \", curCal);\n        console.log(\"Iteration: k = \" + k);\n        var busyTimes = response.result.calendars[curCal].busy;\n\n        for (let i = 0; i < busyTimes.length; i++) {\n          var busyBlock = busyTimes[i];\n          console.log(\"Busy block for \" + curCal, busyBlock);\n          var startTime = busyBlock.start;\n          var endTime = busyBlock.end;\n          var data = {\n            date: startTime\n          };\n          var data2 = {\n            date: endTime\n          };\n          allStartTimes.push(data);\n          allEndTimes.push(data2);\n        }\n      }\n\n      consolidateAllBusyTimes(); // console.log(allStartTimes)\n      // console.log(allEndTimes)\n      // console.log(busyBlocksToAdd)\n    }, function (err) {\n      console.error(\"Execute error\", err);\n    });\n  };\n\n  const consolidateAllBusyTimes = () => {\n    allStartTimes.sort(function (a, b) {\n      var c = new Date(a.date);\n      var d = new Date(b.date);\n      return c - d;\n    }); //    appendPre(\"- - - - - - - Sorting end times\")\n\n    allEndTimes.sort(function (a, b) {\n      var c = new Date(a.date);\n      var d = new Date(b.date);\n      return c - d;\n    });\n    let startTimes = allStartTimes;\n    let endTimes = allEndTimes;\n    var masterArray = [];\n\n    for (let x = 0; x < startTimes.length; x++) {\n      startTime = startTimes[x].date;\n      endTime = endTimes[x].date;\n      timeStartDateFormat = new Date(startTime);\n      timeEndDateFormat = new Date(endTime);\n      prettyStartTime = timeStartDateFormat.toLocaleString('en-US', {\n        timeZone: 'EST'\n      });\n      prettyEndTime = timeEndDateFormat.toLocaleString('en-US', {\n        timeZone: 'EST'\n      });\n      timecombo = [timeStartDateFormat, timeEndDateFormat];\n      masterArray.push(timecombo);\n    } // print OG array\n    // // //\n\n\n    console.log(\"Original array\");\n\n    for (let k = 0; k < masterArray.length; k++) {\n      data = masterArray[k];\n      start = data[0];\n      end = data[1];\n      start2 = new Date(start).toLocaleString('en-US', {\n        timeZone: 'EST'\n      });\n      end2 = new Date(end).toLocaleString('en-US', {\n        timeZone: 'EST'\n      });\n      console.log(k + \" Start: \" + start2 + \" || End: \" + end2);\n    } // STEP 1 merge all same start times\n\n\n    var newtimes = [];\n\n    for (let x = 0; x < masterArray.length; x++) {\n      var data = masterArray[x];\n      var curstart = data[0].getTime();\n      var curend = data[1].getTime();\n      var latestend = curend;\n\n      for (let i = 0; i < masterArray.length; i++) {\n        var data2 = masterArray[i];\n        var start2 = data2[0].getTime();\n        var end2 = data2[1].getTime();\n\n        if (curstart == start2) {\n          if (latestend < end2) {\n            latestend = end2;\n          }\n        }\n      }\n\n      newtime = [curstart, latestend];\n      var shouldWeAddIt = true;\n\n      for (let k = 0; k < newtimes.length; k++) {\n        data = newtimes[k];\n        start = data[0];\n        end = data[1];\n\n        if (start == curstart) {\n          if (end == latestend) {\n            shouldWeAddIt = false;\n          }\n        } else {}\n      }\n\n      if (shouldWeAddIt) {\n        newtimes.push(newtime);\n      }\n    } // print OG array\n    //\n    //  appendPre(\"Merging same start times\");\n\n\n    for (let k = 0; k < newtimes.length; k++) {\n      data = newtimes[k];\n      start = data[0];\n      end = data[1];\n      start2 = new Date(start).toLocaleString('en-US', {\n        timeZone: 'EST'\n      });\n      end2 = new Date(end).toLocaleString('en-US', {\n        timeZone: 'EST'\n      }); //appendPre(k + \" Start: \" + start2 + \" || End: \" + end2);\n    } // STEP 2  Remove times within larger time blocks\n\n\n    var newertimes = [];\n\n    for (let x = 0; x < newtimes.length; x++) {\n      var data = newtimes[x];\n      var curstart = data[0];\n      var curend = data[1];\n      var latestend = curend;\n      var shouldAdd = true;\n\n      for (let i = 0; i < newtimes.length; i++) {\n        var data2 = newtimes[i];\n        var start2 = data2[0];\n        var end2 = data2[1];\n\n        if (start2 < curstart) {\n          if (end2 > curend) {\n            shouldAdd = false;\n          }\n        }\n      }\n\n      newtime = [curstart, curend];\n\n      if (shouldAdd) {\n        newertimes.push(newtime);\n      }\n    } // STEP 2 printing results\n    //  appendPre(\"TIMES WITH OVERLAPPING BLOCKS REMOVED: \" + newertimes);\n\n\n    for (let k = 0; k < newertimes.length; k++) {\n      data = newertimes[k];\n      start = data[0];\n      end = data[1];\n      start2 = new Date(start).toLocaleString('en-US', {\n        timeZone: 'EST'\n      });\n      end2 = new Date(end).toLocaleString('en-US', {\n        timeZone: 'EST'\n      });\n    } // STEP  3 FINAL STEP - consolidate back to back events\n\n\n    var newesttimes = [];\n    var removedtimes = [];\n\n    for (let x = 0; x < newertimes.length; x++) {\n      var data = newertimes[x];\n      var curstart = data[0];\n      var curend = data[1];\n\n      for (let i = 0; i < newertimes.length; i++) {\n        var data2 = newertimes[i];\n        var start2 = data2[0];\n        var end2 = data2[1];\n\n        if (curend > start2) {\n          if (curend < end2) {\n            newtime = [curstart, end2];\n            newesttimes.push(newtime);\n            removedtimes.push([curstart, curend]);\n            removedtimes.push([start2, end2]);\n          }\n        }\n      }\n    } // STEP 3 printing results\n\n\n    for (let k = 0; k < newesttimes.length; k++) {\n      data = newesttimes[k];\n      start = data[0];\n      end = data[1];\n      start2 = new Date(start).toLocaleString('en-US', {\n        timeZone: 'EST'\n      });\n      end2 = new Date(end).toLocaleString('en-US', {\n        timeZone: 'EST'\n      });\n    } // more printing results\n\n\n    for (let k = 0; k < removedtimes.length; k++) {\n      data = removedtimes[k];\n      start = data[0];\n      end = data[1];\n      start2 = new Date(start).toLocaleString('en-US', {\n        timeZone: 'EST'\n      });\n      end2 = new Date(end).toLocaleString('en-US', {\n        timeZone: 'EST'\n      });\n    } // Adding consolidated times together, finishing up etc\n\n\n    var finaltimes = [];\n\n    for (let k = 0; k < newertimes.length; k++) {\n      data = newertimes[k];\n      start = data[0];\n      end = data[1];\n      var shouldWeAddIt = true;\n\n      for (let x = 0; x < removedtimes.length; x++) {\n        data2 = removedtimes[x];\n        start2 = data2[0];\n        end2 = data2[1];\n\n        if (start2 == start) {\n          if (end2 == end) {\n            shouldWeAddIt = false;\n          }\n        }\n      }\n\n      if (shouldWeAddIt == true) {\n        finaltimes.push(data);\n      }\n    }\n\n    for (let k = 0; k < finaltimes.length; k++) {\n      data = finaltimes[k];\n      start = data[0];\n      end = data[1];\n      start2 = new Date(start).toLocaleString('en-US', {\n        timeZone: 'EST'\n      });\n      end2 = new Date(end).toLocaleString('en-US', {\n        timeZone: 'EST'\n      });\n    }\n\n    for (let k = 0; k < newesttimes.length; k++) {\n      data = newesttimes[k];\n      finaltimes.push(data);\n    }\n\n    for (let k = 0; k < finaltimes.length; k++) {\n      data = finaltimes[k];\n      start = data[0];\n      end = data[1];\n      start2 = new Date(start).toLocaleString('en-US', {\n        timeZone: 'EST'\n      });\n      end2 = new Date(end).toLocaleString('en-US', {\n        timeZone: 'EST'\n      });\n    }\n\n    var allstarttimes3 = [];\n    var allendtimes3 = [];\n\n    for (let k = 0; k < finaltimes.length; k++) {\n      data = finaltimes[k];\n      start = data[0];\n      end = data[1];\n      allstarttimes3.push(start);\n      allendtimes3.push(end);\n    }\n\n    allstarttimes3.sort(function (a, b) {\n      return a - b;\n    });\n    allendtimes3.sort(function (a, b) {\n      return a - b;\n    });\n    var finalmasterArray = [];\n\n    for (let x = 0; x < allstarttimes3.length; x++) {\n      startTime = allstarttimes3[x];\n      endTime = allendtimes3[x];\n      timeStartDateFormat = new Date(startTime);\n      timeEndDateFormat = new Date(endTime);\n      prettyStartTime = timeStartDateFormat.toLocaleString('en-US', {\n        timeZone: 'EST'\n      });\n      prettyEndTime = timeEndDateFormat.toLocaleString('en-US', {\n        timeZone: 'EST'\n      });\n      timecombo = [timeStartDateFormat, timeEndDateFormat];\n      finalmasterArray.push(timecombo);\n    }\n\n    printPrettyTimeslots(allstarttimes3, allendtimes3, finalmasterArray);\n  }; //   fetchTest()\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todo-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Selected calendars: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"todo-list\",\n      children: props.selectedCalendars.map((cal, index, originalArray) => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: cal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 432,\n          columnNumber: 17\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 428,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"hi \", format(props.startDate, \"MM-dd-yyyy\")]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 438,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchTest,\n      children: \" fetch here \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 424,\n    columnNumber: 5\n  }, this);\n};\n\n_c = CalendarOutput;\nexport default CalendarOutput;\n\nvar _c;\n\n$RefreshReg$(_c, \"CalendarOutput\");","map":{"version":3,"names":["React","Calendar","format","CalendarOutput","props","allStartTimes","allEndTimes","busyBlocksToAdd","fetchTest","start","Date","startDate","setHours","setMinutes","setSeconds","toISOString","end","console","log","request","timeMin","timeMax","timeZone","cals","i","selectedCalendars","length","calObj","id","push","items","num_days","endDate","getDate","x","day","curDateDay","inputDate","morningBusyStart","setDate","setFullYear","getFullYear","morningBusyEnd","nightBusyStart","nightBusyEnd","morningBusyStart_formatted","date","morningBusyEnd_formatted","nightBusyStart_formatted","nightBusyEnd_formatted","timecombo","freeRequest","gapi","client","calendar","freebusy","query","then","response","result","k","curCal","busyTimes","calendars","busy","busyBlock","startTime","endTime","data","data2","consolidateAllBusyTimes","err","error","sort","a","b","c","d","startTimes","endTimes","masterArray","timeStartDateFormat","timeEndDateFormat","prettyStartTime","toLocaleString","prettyEndTime","start2","end2","newtimes","curstart","getTime","curend","latestend","newtime","shouldWeAddIt","newertimes","shouldAdd","newesttimes","removedtimes","finaltimes","allstarttimes3","allendtimes3","finalmasterArray","printPrettyTimeslots","map","cal","index","originalArray"],"sources":["/Users/tucker/Documents/GitHub/tmb5cg.github.io/src/components/FreeTimeFinder/CalendarOutput.js"],"sourcesContent":["import React from 'react';\nimport Calendar from './Calendar.js'\nimport format from \"date-fns/format\";\n\nconst CalendarOutput = (props) => {\n\n    const allStartTimes = [];\n    const allEndTimes = [];\n    const busyBlocksToAdd = [];\n\n    const fetchTest = () => {\n        // Format start date to 8am\n        var start = new Date(props.startDate)\n        start.setHours(8)\n        start.setMinutes(0)\n        start.setSeconds(0)\n        start = start.toISOString();\n\n        // Format end date to 8 pm\n        var end = new Date(props.startDate)\n        end.setHours(20)\n        end.setMinutes(0)\n        end.setSeconds(0)\n        end = end.toISOString();\n        \n        console.log(start)\n        console.log(end)\n\n        // Build request body\n        const request = {}\n        request.timeMin = start;\n        request.timeMax = end;\n        request.timeZone = \"EST\";\n\n        // Create calendars object\n        let cals = []\n        for (let i=0; i<props.selectedCalendars.length; i++){\n            let calObj = {}\n            calObj.id = props.selectedCalendars[i]\n            cals.push(calObj)\n        }\n\n        request.items = cals\n\n\n        let num_days = props.endDate.getDate() - props.startDate.getDate()\n\n        // for each day in between input dates, add event\n        // day1 8am 830am, 8pm to day2 8am\n        for (let x=0; x < num_days; x++){\n            day = props.startDate.getDate()\n\n            curDateDay = day + x\n            inputDate = props.startDate\n\n            //appendPre(curDateDay)\n            morningBusyStart = new Date()\n            morningBusyStart.setDate(curDateDay)\n            morningBusyStart.setHours(8)\n            morningBusyStart.setMinutes(0)\n            morningBusyStart.setSeconds(0)\n            morningBusyStart.setFullYear(inputDate.getFullYear())\n\n            morningBusyEnd = new Date()\n            morningBusyEnd.setDate(curDateDay)\n            morningBusyEnd.setHours(8)\n            morningBusyEnd.setMinutes(30)\n            morningBusyEnd.setSeconds(0)\n            morningBusyEnd.setFullYear(inputDate.getFullYear())\n\n\n            nightBusyStart = new Date()\n            nightBusyStart.setDate(curDateDay)\n            nightBusyStart.setHours(20)\n            nightBusyStart.setMinutes(0)\n            nightBusyStart.setSeconds(0)\n            nightBusyStart.setFullYear(inputDate.getFullYear())\n\n            nightBusyEnd = new Date()\n            nightBusyEnd.setDate(curDateDay)\n            nightBusyEnd.setHours(20)\n            nightBusyEnd.setMinutes(30)\n            nightBusyEnd.setSeconds(0)\n            nightBusyEnd.setFullYear(inputDate.getFullYear())\n\n            // prettyStartTime = morningBusyStart.toLocaleString('en-US', { timeZone: 'EST' });\n            // prettyEndTime = morningBusyEnd.toLocaleString('en-US', { timeZone: 'EST' });\n            var morningBusyStart_formatted = {date: morningBusyStart};\n            var morningBusyEnd_formatted = {date: morningBusyEnd};\n\n            var nightBusyStart_formatted = {date: nightBusyStart};\n            var nightBusyEnd_formatted = {date: nightBusyEnd};\n\n            allStartTimes.push(morningBusyStart_formatted);\n            allEndTimes.push(morningBusyEnd_formatted);\n\n            allStartTimes.push(nightBusyStart_formatted);\n            allEndTimes.push(nightBusyEnd_formatted);\n\n            timecombo = [morningBusyStart, morningBusyEnd];\n            busyBlocksToAdd.push(timecombo);\n\n        }\n        return freeRequest = gapi.client.calendar.freebusy.query(request)\n      \n              .then(function(response) {\n                console.log(\"Frebusy response: \", response);\n                console.log(\"Frebusy response2: \", response.result);\n\n                for (let k = 0; k < props.selectedCalendars.length; k++) {\n                    var curCal = props.selectedCalendars[k];\n                    console.log(\"Current calendar: \", curCal);\n                    console.log(\"Iteration: k = \" + k)\n        \n                    var busyTimes = response.result.calendars[curCal].busy;\n        \n                    for (let i = 0; i < busyTimes.length; i++){\n                      var busyBlock = busyTimes[i];\n                      console.log(\"Busy block for \" + curCal, busyBlock);\n        \n                      var startTime = busyBlock.start;\n                      var endTime = busyBlock.end;\n        \n                      var data = {date: startTime};\n                      var data2 = {date: endTime};\n        \n                      allStartTimes.push(data);\n                      allEndTimes.push(data2);\n        \n                    }\n                  }\n                consolidateAllBusyTimes();\n                // console.log(allStartTimes)\n                // console.log(allEndTimes)\n                // console.log(busyBlocksToAdd)\n              },\n              function(err) { console.error(\"Execute error\", err); });\n      }\n\n\n      const consolidateAllBusyTimes = () => {\n        allStartTimes.sort(function(a, b) {\n          var c = new Date(a.date);\n          var d = new Date(b.date);\n          return c-d;\n      });\n  \n      //    appendPre(\"- - - - - - - Sorting end times\")\n  \n      allEndTimes.sort(function(a, b) {\n        var c = new Date(a.date);\n        var d = new Date(b.date);\n        return c-d;\n      });\n  \n        let startTimes = allStartTimes;\n        let endTimes = allEndTimes;\n\n      var masterArray = [];\n        for (let x = 0; x < startTimes.length; x++){\n          startTime = startTimes[x].date;\n          endTime = endTimes[x].date;\n  \n          timeStartDateFormat = new Date(startTime);\n          timeEndDateFormat = new Date(endTime);\n  \n          prettyStartTime = timeStartDateFormat.toLocaleString('en-US', { timeZone: 'EST' });\n          prettyEndTime = timeEndDateFormat.toLocaleString('en-US', { timeZone: 'EST' });\n  \n          timecombo = [timeStartDateFormat, timeEndDateFormat];\n          masterArray.push(timecombo);\n        }\n        // print OG array\n      // // //\n      console.log(\"Original array\");\n        for (let k=0; k<masterArray.length;k++){\n          data = masterArray[k];\n          start = data[0];\n          end = data[1];\n  \n          start2 = new Date(start).toLocaleString('en-US', { timeZone: 'EST' });\n          end2 = new Date(end).toLocaleString('en-US', { timeZone: 'EST' });\n  \n          console.log(k + \" Start: \" + start2 + \" || End: \" + end2);\n        }\n        // STEP 1 merge all same start times\n        var newtimes = [];\n        for (let x = 0; x < masterArray.length; x++){\n              var data = masterArray[x];\n  \n              var curstart = data[0].getTime();\n              var curend = data[1].getTime();\n  \n              var latestend = curend;\n  \n              for (let i = 0; i < masterArray.length; i++){\n                var data2 = masterArray[i];\n  \n                var start2 = data2[0].getTime();\n                var end2 = data2[1].getTime();\n                if (curstart == start2) {\n                      if (latestend < end2) {\n                        latestend = end2;\n                      }\n                }\n              }\n  \n              newtime = [curstart, latestend];\n  \n              var shouldWeAddIt = true;\n              for (let k=0; k<newtimes.length;k++){\n                data = newtimes[k];\n                start = data[0];\n                end = data[1];\n  \n                if (start == curstart){\n                  if (end == latestend) {\n                    shouldWeAddIt = false;\n                  }\n                } else {\n                }\n              }\n  \n              if (shouldWeAddIt){\n                newtimes.push(newtime);\n              }\n          }\n  \n          // print OG array\n        //\n      //  appendPre(\"Merging same start times\");\n          for (let k=0; k<newtimes.length;k++){\n            data = newtimes[k];\n            start = data[0];\n            end = data[1];\n  \n            start2 = new Date(start).toLocaleString('en-US', { timeZone: 'EST' });\n            end2 = new Date(end).toLocaleString('en-US', { timeZone: 'EST' });\n  \n            //appendPre(k + \" Start: \" + start2 + \" || End: \" + end2);\n          }\n  \n        // STEP 2  Remove times within larger time blocks\n        var newertimes = [];\n        for (let x = 0; x < newtimes.length; x++){\n              var data = newtimes[x];\n  \n              var curstart = data[0]\n              var curend = data[1]\n              var latestend = curend;\n  \n              var shouldAdd = true;\n              for (let i = 0; i < newtimes.length; i++){\n                var data2 = newtimes[i];\n                var start2 = data2[0]\n                var end2 = data2[1]\n  \n                if (start2 < curstart) {\n                  if (end2 > curend){\n                    shouldAdd = false;\n                  }\n                }\n  \n              }\n  \n              newtime = [curstart, curend];\n  \n              if (shouldAdd) {\n                newertimes.push(newtime);\n              }\n          }\n  \n  \n              // STEP 2 printing results\n            //  appendPre(\"TIMES WITH OVERLAPPING BLOCKS REMOVED: \" + newertimes);\n              for (let k=0; k<newertimes.length;k++){\n                data = newertimes[k];\n                start = data[0];\n                end = data[1];\n  \n                start2 = new Date(start).toLocaleString('en-US', { timeZone: 'EST' });\n                end2 = new Date(end).toLocaleString('en-US', { timeZone: 'EST' });\n  \n              }\n  \n          // STEP  3 FINAL STEP - consolidate back to back events\n          var newesttimes = [];\n          var removedtimes = [];\n          for (let x = 0; x < newertimes.length; x++){\n                var data = newertimes[x];\n  \n                var curstart = data[0];\n                var curend = data[1];\n  \n                for (let i = 0; i < newertimes.length; i++){\n                  var data2 = newertimes[i];\n  \n                  var start2 = data2[0];\n                  var end2 = data2[1];\n  \n                  if (curend > start2){\n                    if (curend < end2) {\n                      newtime = [curstart, end2];\n                      newesttimes.push(newtime);\n                      removedtimes.push([curstart,curend]);\n                      removedtimes.push([start2, end2]);\n                    }\n                  }\n            }\n          }\n  \n              // STEP 3 printing results\n              for (let k=0; k<newesttimes.length; k++){\n                data = newesttimes[k];\n                start = data[0];\n                end = data[1];\n  \n                start2 = new Date(start).toLocaleString('en-US', { timeZone: 'EST' });\n                end2 = new Date(end).toLocaleString('en-US', { timeZone: 'EST' });\n  \n              }\n  \n              // more printing results\n              for (let k=0; k<removedtimes.length; k++){\n                data = removedtimes[k];\n                start = data[0];\n                end = data[1];\n  \n                start2 = new Date(start).toLocaleString('en-US', { timeZone: 'EST' });\n                end2 = new Date(end).toLocaleString('en-US', { timeZone: 'EST' });\n              }\n  \n            // Adding consolidated times together, finishing up etc\n            var finaltimes = [];\n            for (let k=0; k < newertimes.length; k++){\n              data = newertimes[k];\n              start = data[0];\n              end = data[1];\n  \n              var shouldWeAddIt = true;\n  \n              for (let x=0; x < removedtimes.length; x++){\n                    data2 = removedtimes[x];\n                    start2 = data2[0];\n                    end2 = data2[1];\n  \n                    if (start2 == start) {\n                      if (end2 == end) {\n                        shouldWeAddIt = false;\n                      }\n                      }\n                }\n  \n              if (shouldWeAddIt == true) {\n                finaltimes.push(data);\n              }\n           }\n  \n         for (let k=0; k<finaltimes.length; k++){\n           data = finaltimes[k];\n           start = data[0];\n           end = data[1];\n  \n           start2 = new Date(start).toLocaleString('en-US', { timeZone: 'EST' });\n           end2 = new Date(end).toLocaleString('en-US', { timeZone: 'EST' });\n  \n         }\n  \n         for (let k=0; k<newesttimes.length; k++){\n           data = newesttimes[k];\n           finaltimes.push(data);\n         }\n  \n         for (let k=0; k<finaltimes.length; k++){\n           data = finaltimes[k];\n           start = data[0];\n           end = data[1];\n  \n           start2 = new Date(start).toLocaleString('en-US', { timeZone: 'EST' });\n           end2 = new Date(end).toLocaleString('en-US', { timeZone: 'EST' });\n  \n         }\n  \n         var allstarttimes3 = [];\n         var allendtimes3 = [];\n         for (let k=0; k<finaltimes.length; k++){\n           data = finaltimes[k];\n           start = data[0];\n           end = data[1];\n  \n           allstarttimes3.push(start);\n           allendtimes3.push(end);\n         }\n  \n        allstarttimes3.sort(function(a, b){return a-b});\n        allendtimes3.sort(function(a, b){return a-b});\n  \n        var finalmasterArray = [];\n  \n          for (let x = 0; x < allstarttimes3.length; x++){\n            startTime = allstarttimes3[x];\n            endTime = allendtimes3[x];\n  \n            timeStartDateFormat = new Date(startTime);\n            timeEndDateFormat = new Date(endTime);\n  \n            prettyStartTime = timeStartDateFormat.toLocaleString('en-US', { timeZone: 'EST' });\n            prettyEndTime = timeEndDateFormat.toLocaleString('en-US', { timeZone: 'EST' });\n  \n            timecombo = [timeStartDateFormat, timeEndDateFormat];\n            finalmasterArray.push(timecombo);\n          }\n  \n          printPrettyTimeslots(allstarttimes3, allendtimes3, finalmasterArray);\n  \n    }\n      \n\n    \n\n    //   fetchTest()\n\n     return (\n    <div className=\"todo-container\">\n    <h4>Selected calendars: </h4>\n    <br />\n\n    <ul className='todo-list'>\n    {\n        props.selectedCalendars.map((cal, index, originalArray) => {\n            return (\n                <li>{cal}</li>\n            )\n        })\n    }\n    </ul>\n    <h2>hi {format(props.startDate, \"MM-dd-yyyy\")}</h2>\n    <br />\n    <br />\n    <button onClick={fetchTest}> fetch here </button>\n\n    </div>\n\n     );\n}\n\nexport default CalendarOutput;"],"mappings":"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"},"metadata":{},"sourceType":"module"}