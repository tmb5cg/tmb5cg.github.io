{"ast":null,"code":"var _jsxFileName = \"/Users/tucker/Documents/GitHub/tmb5cg.github.io/src/components/FreeTimeFinder/CalendarOutput.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Calendar from './Calendar.js';\nimport format from \"date-fns/format\";\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CalendarOutput = props => {\n  _s();\n\n  const [freeTimes, setFreeTimes] = useState();\n  const [outputReady, setOutputReady] = useState(false);\n  const allStartTimes = [];\n  const allEndTimes = [];\n  const busyBlocksToAdd = [];\n\n  const fetchFreeTimes = () => {\n    // Format start date to 8am\n    var start = new Date(props.startDate);\n    start.setHours(8);\n    start.setMinutes(0);\n    start.setSeconds(0);\n    start = start.toISOString(); // Format end date to 8 pm\n\n    var end = new Date(props.endDate);\n    end.setHours(20);\n    end.setMinutes(0);\n    end.setSeconds(0);\n    end = end.toISOString();\n    console.log(start);\n    console.log(end); // Build request body\n\n    const request = {};\n    request.timeMin = start;\n    request.timeMax = end;\n    request.timeZone = \"EST\"; // Create calendars object\n\n    let cals = [];\n\n    for (let i = 0; i < props.selectedCalendars.length; i++) {\n      let calObj = {};\n      calObj.id = props.selectedCalendars[i];\n      cals.push(calObj);\n    }\n\n    request.items = cals;\n    let num_days = props.endDate.getDate() - props.startDate.getDate(); // for each day in between input dates, add event\n    // day1 8am 830am, 8pm to day2 8am\n\n    for (let x = 0; x < num_days; x++) {\n      let day = props.startDate.getDate();\n      let curDateDay = day + x;\n      let inputDate = props.startDate; //appendPre(curDateDay)\n\n      let morningBusyStart = new Date();\n      morningBusyStart.setDate(curDateDay);\n      morningBusyStart.setHours(8);\n      morningBusyStart.setMinutes(0);\n      morningBusyStart.setSeconds(0);\n      morningBusyStart.setFullYear(inputDate.getFullYear());\n      let morningBusyEnd = new Date();\n      morningBusyEnd.setDate(curDateDay);\n      morningBusyEnd.setHours(8);\n      morningBusyEnd.setMinutes(30);\n      morningBusyEnd.setSeconds(0);\n      morningBusyEnd.setFullYear(inputDate.getFullYear());\n      let nightBusyStart = new Date();\n      nightBusyStart.setDate(curDateDay);\n      nightBusyStart.setHours(20);\n      nightBusyStart.setMinutes(0);\n      nightBusyStart.setSeconds(0);\n      nightBusyStart.setFullYear(inputDate.getFullYear());\n      let nightBusyEnd = new Date();\n      nightBusyEnd.setDate(curDateDay);\n      nightBusyEnd.setHours(20);\n      nightBusyEnd.setMinutes(30);\n      nightBusyEnd.setSeconds(0);\n      nightBusyEnd.setFullYear(inputDate.getFullYear()); // prettyStartTime = morningBusyStart.toLocaleString('en-US', { timeZone: 'EST' });\n      // prettyEndTime = morningBusyEnd.toLocaleString('en-US', { timeZone: 'EST' });\n\n      var morningBusyStart_formatted = {\n        date: morningBusyStart\n      };\n      var morningBusyEnd_formatted = {\n        date: morningBusyEnd\n      };\n      var nightBusyStart_formatted = {\n        date: nightBusyStart\n      };\n      var nightBusyEnd_formatted = {\n        date: nightBusyEnd\n      };\n      allStartTimes.push(morningBusyStart_formatted);\n      allEndTimes.push(morningBusyEnd_formatted);\n      allStartTimes.push(nightBusyStart_formatted);\n      allEndTimes.push(nightBusyEnd_formatted);\n      let timecombo = [morningBusyStart, morningBusyEnd];\n      busyBlocksToAdd.push(timecombo);\n    }\n\n    return freeRequest = gapi.client.calendar.freebusy.query(request).then(function (response) {\n      console.log(\"Frebusy response: \", response);\n      console.log(\"Frebusy response2: \", response.result);\n\n      for (let k = 0; k < props.selectedCalendars.length; k++) {\n        var curCal = props.selectedCalendars[k];\n        console.log(\"Current calendar: \", curCal);\n        console.log(\"Iteration: k = \" + k);\n        var busyTimes = response.result.calendars[curCal].busy;\n\n        for (let i = 0; i < busyTimes.length; i++) {\n          var busyBlock = busyTimes[i];\n          console.log(\"Busy block for \" + curCal, busyBlock);\n          var startTime = busyBlock.start;\n          var endTime = busyBlock.end;\n          var data = {\n            date: startTime\n          };\n          var data2 = {\n            date: endTime\n          };\n          allStartTimes.push(data);\n          allEndTimes.push(data2);\n        }\n      }\n\n      consolidateAllBusyTimes(); // console.log(allStartTimes)\n      // console.log(allEndTimes)\n      // console.log(busyBlocksToAdd)\n    }, function (err) {\n      console.error(\"Execute error\", err);\n    });\n  };\n\n  const consolidateAllBusyTimes = () => {\n    allStartTimes.sort(function (a, b) {\n      var c = new Date(a.date);\n      var d = new Date(b.date);\n      return c - d;\n    }); //    appendPre(\"- - - - - - - Sorting end times\")\n\n    allEndTimes.sort(function (a, b) {\n      var c = new Date(a.date);\n      var d = new Date(b.date);\n      return c - d;\n    });\n    let startTimes = allStartTimes;\n    let endTimes = allEndTimes;\n    var masterArray = [];\n\n    for (let x = 0; x < startTimes.length; x++) {\n      let startTime = startTimes[x].date;\n      let endTime = endTimes[x].date;\n      let timeStartDateFormat = new Date(startTime);\n      let timeEndDateFormat = new Date(endTime);\n      let prettyStartTime = timeStartDateFormat.toLocaleString('en-US', {\n        timeZone: 'EST'\n      });\n      let prettyEndTime = timeEndDateFormat.toLocaleString('en-US', {\n        timeZone: 'EST'\n      });\n      let timecombo = [timeStartDateFormat, timeEndDateFormat];\n      masterArray.push(timecombo);\n    } // print OG array\n    // // //\n\n\n    console.log(\"Original array\");\n\n    for (let k = 0; k < masterArray.length; k++) {\n      let data = masterArray[k];\n      let start = data[0];\n      let end = data[1];\n      let start2 = new Date(start).toLocaleString('en-US', {\n        timeZone: 'EST'\n      });\n      let end2 = new Date(end).toLocaleString('en-US', {\n        timeZone: 'EST'\n      });\n      console.log(k + \" Start: \" + start2 + \" || End: \" + end2);\n    } // STEP 1 merge all same start times\n\n\n    var newtimes = [];\n\n    for (let x = 0; x < masterArray.length; x++) {\n      var data = masterArray[x];\n      var curstart = data[0].getTime();\n      var curend = data[1].getTime();\n      var latestend = curend;\n\n      for (let i = 0; i < masterArray.length; i++) {\n        var data2 = masterArray[i];\n        var start2 = data2[0].getTime();\n        var end2 = data2[1].getTime();\n\n        if (curstart == start2) {\n          if (latestend < end2) {\n            latestend = end2;\n          }\n        }\n      }\n\n      let newtime = [curstart, latestend];\n      var shouldWeAddIt = true;\n\n      for (let k = 0; k < newtimes.length; k++) {\n        let data = newtimes[k];\n        let start = data[0];\n        let end = data[1];\n\n        if (start == curstart) {\n          if (end == latestend) {\n            shouldWeAddIt = false;\n          }\n        } else {}\n      }\n\n      if (shouldWeAddIt) {\n        newtimes.push(newtime);\n      }\n    } // print OG array\n    //\n    //  appendPre(\"Merging same start times\");\n\n\n    for (let k = 0; k < newtimes.length; k++) {\n      let data = newtimes[k];\n      let start = data[0];\n      let end = data[1];\n      start2 = new Date(start).toLocaleString('en-US', {\n        timeZone: 'EST'\n      });\n      end2 = new Date(end).toLocaleString('en-US', {\n        timeZone: 'EST'\n      }); //appendPre(k + \" Start: \" + start2 + \" || End: \" + end2);\n    } // STEP 2  Remove times within larger time blocks\n\n\n    var newertimes = [];\n\n    for (let x = 0; x < newtimes.length; x++) {\n      var data = newtimes[x];\n      var curstart = data[0];\n      var curend = data[1];\n      var latestend = curend;\n      var shouldAdd = true;\n\n      for (let i = 0; i < newtimes.length; i++) {\n        var data2 = newtimes[i];\n        var start2 = data2[0];\n        var end2 = data2[1];\n\n        if (start2 < curstart) {\n          if (end2 > curend) {\n            shouldAdd = false;\n          }\n        }\n      }\n\n      let newtime = [curstart, curend];\n\n      if (shouldAdd) {\n        newertimes.push(newtime);\n      }\n    } // STEP 2 printing results\n    //  appendPre(\"TIMES WITH OVERLAPPING BLOCKS REMOVED: \" + newertimes);\n\n\n    for (let k = 0; k < newertimes.length; k++) {\n      data = newertimes[k];\n      let start = data[0];\n      let end = data[1];\n      let start2 = new Date(start).toLocaleString('en-US', {\n        timeZone: 'EST'\n      });\n      let end2 = new Date(end).toLocaleString('en-US', {\n        timeZone: 'EST'\n      });\n    } // STEP  3 FINAL STEP - consolidate back to back events\n\n\n    var newesttimes = [];\n    var removedtimes = [];\n\n    for (let x = 0; x < newertimes.length; x++) {\n      var data = newertimes[x];\n      var curstart = data[0];\n      var curend = data[1];\n\n      for (let i = 0; i < newertimes.length; i++) {\n        var data2 = newertimes[i];\n        var start2 = data2[0];\n        var end2 = data2[1];\n\n        if (curend > start2) {\n          if (curend < end2) {\n            let newtime = [curstart, end2];\n            newesttimes.push(newtime);\n            removedtimes.push([curstart, curend]);\n            removedtimes.push([start2, end2]);\n          }\n        }\n      }\n    } // STEP 3 printing results\n\n\n    for (let k = 0; k < newesttimes.length; k++) {\n      data = newesttimes[k];\n      let start = data[0];\n      let end = data[1];\n      let start2 = new Date(start).toLocaleString('en-US', {\n        timeZone: 'EST'\n      });\n      let end2 = new Date(end).toLocaleString('en-US', {\n        timeZone: 'EST'\n      });\n    } // more printing results\n\n\n    for (let k = 0; k < removedtimes.length; k++) {\n      data = removedtimes[k];\n      let start = data[0];\n      let end = data[1];\n      let start2 = new Date(start).toLocaleString('en-US', {\n        timeZone: 'EST'\n      });\n      let end2 = new Date(end).toLocaleString('en-US', {\n        timeZone: 'EST'\n      });\n    } // Adding consolidated times together, finishing up etc\n\n\n    var finaltimes = [];\n\n    for (let k = 0; k < newertimes.length; k++) {\n      data = newertimes[k];\n      let start = data[0];\n      let end = data[1];\n      var shouldWeAddIt = true;\n\n      for (let x = 0; x < removedtimes.length; x++) {\n        let data2 = removedtimes[x];\n        let start2 = data2[0];\n        let end2 = data2[1];\n\n        if (start2 == start) {\n          if (end2 == end) {\n            shouldWeAddIt = false;\n          }\n        }\n      }\n\n      if (shouldWeAddIt == true) {\n        finaltimes.push(data);\n      }\n    }\n\n    for (let k = 0; k < finaltimes.length; k++) {\n      data = finaltimes[k];\n      let start = data[0];\n      let end = data[1];\n      let start2 = new Date(start).toLocaleString('en-US', {\n        timeZone: 'EST'\n      });\n      let end2 = new Date(end).toLocaleString('en-US', {\n        timeZone: 'EST'\n      });\n    }\n\n    for (let k = 0; k < newesttimes.length; k++) {\n      let data = newesttimes[k];\n      finaltimes.push(data);\n    }\n\n    for (let k = 0; k < finaltimes.length; k++) {\n      data = finaltimes[k];\n      let start = data[0];\n      let end = data[1];\n      let start2 = new Date(start).toLocaleString('en-US', {\n        timeZone: 'EST'\n      });\n      let end2 = new Date(end).toLocaleString('en-US', {\n        timeZone: 'EST'\n      });\n    }\n\n    var allstarttimes3 = [];\n    var allendtimes3 = [];\n\n    for (let k = 0; k < finaltimes.length; k++) {\n      data = finaltimes[k];\n      let start = data[0];\n      let end = data[1];\n      allstarttimes3.push(start);\n      allendtimes3.push(end);\n    }\n\n    allstarttimes3.sort(function (a, b) {\n      return a - b;\n    });\n    allendtimes3.sort(function (a, b) {\n      return a - b;\n    });\n    var finalmasterArray = [];\n\n    for (let x = 0; x < allstarttimes3.length; x++) {\n      let startTime = allstarttimes3[x];\n      let endTime = allendtimes3[x];\n      let timeStartDateFormat = new Date(startTime);\n      let timeEndDateFormat = new Date(endTime);\n      let prettyStartTime = timeStartDateFormat.toLocaleString('en-US', {\n        timeZone: 'EST'\n      });\n      let prettyEndTime = timeEndDateFormat.toLocaleString('en-US', {\n        timeZone: 'EST'\n      });\n      let timecombo = [timeStartDateFormat, timeEndDateFormat];\n      finalmasterArray.push(timecombo);\n    }\n\n    printPrettyTimeslots(allstarttimes3, allendtimes3, finalmasterArray);\n  };\n\n  function printPrettyTimeslots(allstarttimes3, allendtimes3, finalmasterArray) {\n    var awesomeArray = [];\n    let diff = '';\n    let beginfreeslot = '';\n    let endfreeslot = '';\n    let prettyStart = '';\n    let prettyEnd = '';\n    let prettyStartTime = '';\n    let prettyEndTime = '';\n    let splitStart = '';\n    let splitEnd = '';\n    let ogStart = '';\n    let ogEnd = '';\n\n    for (let x = 0; x < finalmasterArray.length - 1; x++) {\n      var times = finalmasterArray[x];\n      var curstart = times[0];\n      var curend = times[1];\n      var times = finalmasterArray[x + 1];\n      var nextstart = times[0];\n      var nextend = times[1];\n\n      if (x == 0) {\n        // First element, subtract from 8am\n        let eightAm = new Date(curstart);\n        eightAm.setHours(8);\n        eightAm.setMinutes(0);\n        eightAm.setSeconds(0);\n        eightAm = eightAm.getTime();\n        eightAm = new Date(eightAm);\n        let diff = curstart - eightAm;\n\n        if (diff > 0 && diff < 36000000) {\n          let beginfreeslot = eightAm;\n          eightAm = eightAm.getTime();\n          let endfreeslot = eightAm + diff; // console.log(\"morning begin free slot (should be 8am): \" + beginfreeslot);\n          // console.log(\"morning diff should be 30 mins: \" + diff);\n          //\n          // console.log(\"morning end free slot (should be 830am): \" + endfreeslot);\n\n          let prettyStart = new Date(beginfreeslot);\n          let prettyEnd = new Date(endfreeslot);\n          let prettyStartTime = prettyStart.toLocaleString('en-US', {\n            timeZone: 'EST'\n          });\n          let prettyEndTime = prettyEnd.toLocaleString('en-US', {\n            timeZone: 'EST'\n          });\n          let splitStart = prettyStartTime.split(\" \");\n          let splitEnd = prettyEndTime.split(\" \");\n          let ogStart = splitStart[1];\n          let ogEnd = splitEnd[1];\n          awesomeArray.push([prettyStart, prettyEnd]);\n        } // final else statement is skipped on first element due to bad code\n        // copying and pasting the else so it will hit, then it will\n        // add the end time\n\n\n        diff = nextstart - curend;\n\n        if (diff > 0 && diff < 36000000) {\n          let beginfreeslot = curend;\n          let endfreeslot = nextstart + diff;\n          console.log(\"correct begin free slot: \" + beginfreeslot);\n          console.log(\"correct diff \" + diff);\n          console.log(\"correct end slot: \" + endfreeslot);\n          let prettyStart = new Date(beginfreeslot);\n          let prettyEnd = new Date(endfreeslot);\n          let prettyStartTime = prettyStart.toLocaleString('en-US', {\n            timeZone: 'EST'\n          });\n          let prettyEndTime = prettyEnd.toLocaleString('en-US', {\n            timeZone: 'EST'\n          });\n          let splitStart = prettyStartTime.split(\" \");\n          let splitEnd = prettyEndTime.split(\" \");\n          let ogStart = splitStart[1];\n          let ogEnd = splitEnd[1];\n          awesomeArray.push([prettyStart, prettyEnd]);\n        }\n      } else if (x == finalmasterArray.length - 2) {\n        // final else statement is skipped on last element due to bad code\n        // copying and pasting the else so it will hit, then it will\n        // add the end time\n        diff = nextstart - curend;\n\n        if (diff > 0 && diff < 36000000) {\n          let beginfreeslot = curend;\n          let endfreeslot = nextstart + diff;\n          console.log(\"correct begin free slot: \" + beginfreeslot);\n          console.log(\"correct diff \" + diff);\n          console.log(\"correct end slot: \" + endfreeslot);\n          let prettyStart = new Date(beginfreeslot);\n          let prettyEnd = new Date(endfreeslot);\n          let prettyStartTime = prettyStart.toLocaleString('en-US', {\n            timeZone: 'EST'\n          });\n          let prettyEndTime = prettyEnd.toLocaleString('en-US', {\n            timeZone: 'EST'\n          });\n          let splitStart = prettyStartTime.split(\" \");\n          let splitEnd = prettyEndTime.split(\" \");\n          let ogStart = splitStart[1];\n          let ogEnd = splitEnd[1];\n          awesomeArray.push([prettyStart, prettyEnd]);\n        } // Proceed to add final end of day -> 8 pm time slot\n\n\n        let sevenPm = new Date(curend);\n        sevenPm.setHours(8 + 12);\n        sevenPm.setMinutes(0);\n        sevenPm.setSeconds(0);\n        nextend = nextend.getTime();\n        diff = sevenPm - nextend;\n\n        if (diff > 0 && diff < 36000000) {\n          // nextend = nextend.getTime()\n          beginfreeslot = nextend;\n          endfreeslot = nextend + diff;\n          prettyStart = new Date(beginfreeslot);\n          prettyEnd = new Date(endfreeslot);\n          prettyStartTime = prettyStart.toLocaleString('en-US', {\n            timeZone: 'EST'\n          });\n          prettyEndTime = prettyEnd.toLocaleString('en-US', {\n            timeZone: 'EST'\n          });\n          splitStart = prettyStartTime.split(\" \");\n          splitEnd = prettyEndTime.split(\" \");\n          ogStart = splitStart[1];\n          ogEnd = splitEnd[1];\n          awesomeArray.push([prettyStart, prettyEnd]);\n        }\n      } else {\n        let diff = nextstart - curend;\n\n        if (diff > 0 && diff < 36000000) {\n          beginfreeslot = curend;\n          endfreeslot = nextstart + diff;\n          console.log(\"correct begin free slot: \" + beginfreeslot);\n          console.log(\"correct diff \" + diff);\n          console.log(\"correct end slot: \" + endfreeslot);\n          prettyStart = new Date(beginfreeslot);\n          prettyEnd = new Date(endfreeslot);\n          prettyStartTime = prettyStart.toLocaleString('en-US', {\n            timeZone: 'EST'\n          });\n          prettyEndTime = prettyEnd.toLocaleString('en-US', {\n            timeZone: 'EST'\n          });\n          splitStart = prettyStartTime.split(\" \");\n          splitEnd = prettyEndTime.split(\" \");\n          ogStart = splitStart[1];\n          ogEnd = splitEnd[1];\n          awesomeArray.push([prettyStart, prettyEnd]);\n        }\n      }\n    } // Remove old elements in list\n\n\n    for (let x = 0; x < awesomeArray.length; x++) {\n      var times = awesomeArray[x];\n      var curstart = times[0];\n      var curend = times[1];\n      let curstartString = String(curstart);\n      let curendString = String(curend);\n      let startstring = curstart.toLocaleString('en-US', {\n        timeZone: 'EST',\n        timeStyle: \"short\",\n        dateStyle: \"short\"\n      });\n      let endstring = curend.toLocaleString('en-US', {\n        timeZone: 'EST',\n        timeStyle: \"short\",\n        dateStyle: \"short\"\n      });\n      let startstringsplit = curstartString.split(\" \");\n      let pretty_dayofweek = startstringsplit[0];\n      let month = curstart.getMonth() + 1;\n      let day = curstart.getDate();\n      let startstringsplit2 = startstring.split(\" \");\n      let pretty_starttime = startstringsplit2[1] + \" \" + startstringsplit2[2];\n      let endstringsplit2 = endstring.split(\" \");\n      let pretty_endtime = endstringsplit2[1] + \" \" + endstringsplit2[2];\n      let prettystring = pretty_dayofweek + \" \" + month + \"/\" + day + \": \" + pretty_starttime + \" to \" + pretty_endtime;\n      console.log(\"prettty\" + prettystring); // var node = document.createElement(\"LI\");\n      //var textnode = document.createTextNode(\"[inputDate]: \" + curstart +  \" to \" + curend);\n      // var textnode = document.createTextNode(prettystring)\n      // node.appendChild(textnode);\n      // document.getElementById(\"myList\").appendChild(node);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todo-container\",\n    children: [outputReady ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"hi there\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 638,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 637,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn-upload\",\n      onClick: fetchFreeTimes,\n      children: \" Fetch free times \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 642,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 645,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 646,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 635,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CalendarOutput, \"pF4++AckULIKr2yBKhyywb56XyQ=\");\n\n_c = CalendarOutput;\nexport default CalendarOutput;\n\nvar _c;\n\n$RefreshReg$(_c, \"CalendarOutput\");","map":{"version":3,"names":["React","Calendar","format","useState","useEffect","CalendarOutput","props","freeTimes","setFreeTimes","outputReady","setOutputReady","allStartTimes","allEndTimes","busyBlocksToAdd","fetchFreeTimes","start","Date","startDate","setHours","setMinutes","setSeconds","toISOString","end","endDate","console","log","request","timeMin","timeMax","timeZone","cals","i","selectedCalendars","length","calObj","id","push","items","num_days","getDate","x","day","curDateDay","inputDate","morningBusyStart","setDate","setFullYear","getFullYear","morningBusyEnd","nightBusyStart","nightBusyEnd","morningBusyStart_formatted","date","morningBusyEnd_formatted","nightBusyStart_formatted","nightBusyEnd_formatted","timecombo","freeRequest","gapi","client","calendar","freebusy","query","then","response","result","k","curCal","busyTimes","calendars","busy","busyBlock","startTime","endTime","data","data2","consolidateAllBusyTimes","err","error","sort","a","b","c","d","startTimes","endTimes","masterArray","timeStartDateFormat","timeEndDateFormat","prettyStartTime","toLocaleString","prettyEndTime","start2","end2","newtimes","curstart","getTime","curend","latestend","newtime","shouldWeAddIt","newertimes","shouldAdd","newesttimes","removedtimes","finaltimes","allstarttimes3","allendtimes3","finalmasterArray","printPrettyTimeslots","awesomeArray","diff","beginfreeslot","endfreeslot","prettyStart","prettyEnd","splitStart","splitEnd","ogStart","ogEnd","times","nextstart","nextend","eightAm","split","sevenPm","curstartString","String","curendString","startstring","timeStyle","dateStyle","endstring","startstringsplit","pretty_dayofweek","month","getMonth","startstringsplit2","pretty_starttime","endstringsplit2","pretty_endtime","prettystring"],"sources":["/Users/tucker/Documents/GitHub/tmb5cg.github.io/src/components/FreeTimeFinder/CalendarOutput.js"],"sourcesContent":["import React from 'react';\nimport Calendar from './Calendar.js'\nimport format from \"date-fns/format\";\nimport { useState, useEffect} from 'react'\n\n\nconst CalendarOutput = (props) => {\n\n  const [freeTimes, setFreeTimes] = useState()\n  const [outputReady, setOutputReady] = useState(false)\n\n    const allStartTimes = [];\n    const allEndTimes = [];\n    const busyBlocksToAdd = [];\n\n    const fetchFreeTimes = () => {\n        // Format start date to 8am\n        var start = new Date(props.startDate)\n        start.setHours(8)\n        start.setMinutes(0)\n        start.setSeconds(0)\n        start = start.toISOString();\n\n        // Format end date to 8 pm\n        var end = new Date(props.endDate)\n        end.setHours(20)\n        end.setMinutes(0)\n        end.setSeconds(0)\n        end = end.toISOString();\n        \n        console.log(start)\n        console.log(end)\n\n        // Build request body\n        const request = {}\n        request.timeMin = start;\n        request.timeMax = end;\n        request.timeZone = \"EST\";\n\n        // Create calendars object\n        let cals = []\n        for (let i=0; i<props.selectedCalendars.length; i++){\n            let calObj = {}\n            calObj.id = props.selectedCalendars[i]\n            cals.push(calObj)\n        }\n\n        request.items = cals\n\n\n        let num_days = props.endDate.getDate() - props.startDate.getDate()\n\n        // for each day in between input dates, add event\n        // day1 8am 830am, 8pm to day2 8am\n        for (let x=0; x < num_days; x++){\n            let day = props.startDate.getDate()\n\n            let curDateDay = day + x\n            let inputDate = props.startDate\n\n            //appendPre(curDateDay)\n            let morningBusyStart = new Date()\n            morningBusyStart.setDate(curDateDay)\n            morningBusyStart.setHours(8)\n            morningBusyStart.setMinutes(0)\n            morningBusyStart.setSeconds(0)\n            morningBusyStart.setFullYear(inputDate.getFullYear())\n\n            let morningBusyEnd = new Date()\n            morningBusyEnd.setDate(curDateDay)\n            morningBusyEnd.setHours(8)\n            morningBusyEnd.setMinutes(30)\n            morningBusyEnd.setSeconds(0)\n            morningBusyEnd.setFullYear(inputDate.getFullYear())\n\n\n            let nightBusyStart = new Date()\n            nightBusyStart.setDate(curDateDay)\n            nightBusyStart.setHours(20)\n            nightBusyStart.setMinutes(0)\n            nightBusyStart.setSeconds(0)\n            nightBusyStart.setFullYear(inputDate.getFullYear())\n\n            let nightBusyEnd = new Date()\n            nightBusyEnd.setDate(curDateDay)\n            nightBusyEnd.setHours(20)\n            nightBusyEnd.setMinutes(30)\n            nightBusyEnd.setSeconds(0)\n            nightBusyEnd.setFullYear(inputDate.getFullYear())\n\n            // prettyStartTime = morningBusyStart.toLocaleString('en-US', { timeZone: 'EST' });\n            // prettyEndTime = morningBusyEnd.toLocaleString('en-US', { timeZone: 'EST' });\n            var morningBusyStart_formatted = {date: morningBusyStart};\n            var morningBusyEnd_formatted = {date: morningBusyEnd};\n\n            var nightBusyStart_formatted = {date: nightBusyStart};\n            var nightBusyEnd_formatted = {date: nightBusyEnd};\n\n            allStartTimes.push(morningBusyStart_formatted);\n            allEndTimes.push(morningBusyEnd_formatted);\n\n            allStartTimes.push(nightBusyStart_formatted);\n            allEndTimes.push(nightBusyEnd_formatted);\n\n            let timecombo = [morningBusyStart, morningBusyEnd];\n            busyBlocksToAdd.push(timecombo);\n\n        }\n        return freeRequest = gapi.client.calendar.freebusy.query(request)\n      \n              .then(function(response) {\n                console.log(\"Frebusy response: \", response);\n                console.log(\"Frebusy response2: \", response.result);\n\n                for (let k = 0; k < props.selectedCalendars.length; k++) {\n                    var curCal = props.selectedCalendars[k];\n                    console.log(\"Current calendar: \", curCal);\n                    console.log(\"Iteration: k = \" + k)\n        \n                    var busyTimes = response.result.calendars[curCal].busy;\n        \n                    for (let i = 0; i < busyTimes.length; i++){\n                      var busyBlock = busyTimes[i];\n                      console.log(\"Busy block for \" + curCal, busyBlock);\n        \n                      var startTime = busyBlock.start;\n                      var endTime = busyBlock.end;\n        \n                      var data = {date: startTime};\n                      var data2 = {date: endTime};\n        \n                      allStartTimes.push(data);\n                      allEndTimes.push(data2);\n        \n                    }\n                  }\n                consolidateAllBusyTimes();\n                // console.log(allStartTimes)\n                // console.log(allEndTimes)\n                // console.log(busyBlocksToAdd)\n              },\n              function(err) { console.error(\"Execute error\", err); });\n      }\n\n\n      const consolidateAllBusyTimes = () => {\n        allStartTimes.sort(function(a, b) {\n          var c = new Date(a.date);\n          var d = new Date(b.date);\n          return c-d;\n      });\n  \n      //    appendPre(\"- - - - - - - Sorting end times\")\n  \n      allEndTimes.sort(function(a, b) {\n        var c = new Date(a.date);\n        var d = new Date(b.date);\n        return c-d;\n      });\n  \n        let startTimes = allStartTimes;\n        let endTimes = allEndTimes;\n\n      var masterArray = [];\n        for (let x = 0; x < startTimes.length; x++){\n          let startTime = startTimes[x].date;\n          let endTime = endTimes[x].date;\n  \n          let timeStartDateFormat = new Date(startTime);\n          let timeEndDateFormat = new Date(endTime);\n  \n          let prettyStartTime = timeStartDateFormat.toLocaleString('en-US', { timeZone: 'EST' });\n          let prettyEndTime = timeEndDateFormat.toLocaleString('en-US', { timeZone: 'EST' });\n  \n          let timecombo = [timeStartDateFormat, timeEndDateFormat];\n          masterArray.push(timecombo);\n        }\n        // print OG array\n      // // //\n      console.log(\"Original array\");\n        for (let k=0; k<masterArray.length;k++){\n          let data = masterArray[k];\n          let start = data[0];\n          let end = data[1];\n  \n          let start2 = new Date(start).toLocaleString('en-US', { timeZone: 'EST' });\n          let end2 = new Date(end).toLocaleString('en-US', { timeZone: 'EST' });\n  \n          console.log(k + \" Start: \" + start2 + \" || End: \" + end2);\n        }\n        // STEP 1 merge all same start times\n        var newtimes = [];\n        for (let x = 0; x < masterArray.length; x++){\n              var data = masterArray[x];\n  \n              var curstart = data[0].getTime();\n              var curend = data[1].getTime();\n  \n              var latestend = curend;\n  \n              for (let i = 0; i < masterArray.length; i++){\n                var data2 = masterArray[i];\n  \n                var start2 = data2[0].getTime();\n                var end2 = data2[1].getTime();\n                if (curstart == start2) {\n                      if (latestend < end2) {\n                        latestend = end2;\n                      }\n                }\n              }\n  \n              let newtime = [curstart, latestend];\n  \n              var shouldWeAddIt = true;\n              for (let k=0; k<newtimes.length;k++){\n                let data = newtimes[k];\n                let start = data[0];\n                let end = data[1];\n  \n                if (start == curstart){\n                  if (end == latestend) {\n                    shouldWeAddIt = false;\n                  }\n                } else {\n                }\n              }\n  \n              if (shouldWeAddIt){\n                newtimes.push(newtime);\n              }\n          }\n  \n          // print OG array\n        //\n      //  appendPre(\"Merging same start times\");\n          for (let k=0; k<newtimes.length;k++){\n            let data = newtimes[k];\n            let start = data[0];\n            let end = data[1];\n  \n            start2 = new Date(start).toLocaleString('en-US', { timeZone: 'EST' });\n            end2 = new Date(end).toLocaleString('en-US', { timeZone: 'EST' });\n  \n            //appendPre(k + \" Start: \" + start2 + \" || End: \" + end2);\n          }\n  \n        // STEP 2  Remove times within larger time blocks\n        var newertimes = [];\n        for (let x = 0; x < newtimes.length; x++){\n              var data = newtimes[x];\n  \n              var curstart = data[0]\n              var curend = data[1]\n              var latestend = curend;\n  \n              var shouldAdd = true;\n              for (let i = 0; i < newtimes.length; i++){\n                var data2 = newtimes[i];\n                var start2 = data2[0]\n                var end2 = data2[1]\n  \n                if (start2 < curstart) {\n                  if (end2 > curend){\n                    shouldAdd = false;\n                  }\n                }\n  \n              }\n  \n              let newtime = [curstart, curend];\n  \n              if (shouldAdd) {\n                newertimes.push(newtime);\n              }\n          }\n  \n  \n              // STEP 2 printing results\n            //  appendPre(\"TIMES WITH OVERLAPPING BLOCKS REMOVED: \" + newertimes);\n              for (let k=0; k<newertimes.length;k++){\n                data = newertimes[k];\n                let start = data[0];\n                let end = data[1];\n  \n                let start2 = new Date(start).toLocaleString('en-US', { timeZone: 'EST' });\n                let end2 = new Date(end).toLocaleString('en-US', { timeZone: 'EST' });\n  \n              }\n  \n          // STEP  3 FINAL STEP - consolidate back to back events\n          var newesttimes = [];\n          var removedtimes = [];\n          for (let x = 0; x < newertimes.length; x++){\n                var data = newertimes[x];\n  \n                var curstart = data[0];\n                var curend = data[1];\n  \n                for (let i = 0; i < newertimes.length; i++){\n                  var data2 = newertimes[i];\n  \n                  var start2 = data2[0];\n                  var end2 = data2[1];\n  \n                  if (curend > start2){\n                    if (curend < end2) {\n                      let newtime = [curstart, end2];\n                      newesttimes.push(newtime);\n                      removedtimes.push([curstart,curend]);\n                      removedtimes.push([start2, end2]);\n                    }\n                  }\n            }\n          }\n  \n              // STEP 3 printing results\n              for (let k=0; k<newesttimes.length; k++){\n                data = newesttimes[k];\n                let start = data[0];\n                let end = data[1];\n  \n                let start2 = new Date(start).toLocaleString('en-US', { timeZone: 'EST' });\n                let end2 = new Date(end).toLocaleString('en-US', { timeZone: 'EST' });\n  \n              }\n  \n              // more printing results\n              for (let k=0; k<removedtimes.length; k++){\n                data = removedtimes[k];\n                let start = data[0];\n                let end = data[1];\n  \n                let start2 = new Date(start).toLocaleString('en-US', { timeZone: 'EST' });\n                let end2 = new Date(end).toLocaleString('en-US', { timeZone: 'EST' });\n              }\n  \n            // Adding consolidated times together, finishing up etc\n            var finaltimes = [];\n            for (let k=0; k < newertimes.length; k++){\n              data = newertimes[k];\n              let start = data[0];\n              let end = data[1];\n  \n              var shouldWeAddIt = true;\n  \n              for (let x=0; x < removedtimes.length; x++){\n                    let data2 = removedtimes[x];\n                    let start2 = data2[0];\n                    let end2 = data2[1];\n  \n                    if (start2 == start) {\n                      if (end2 == end) {\n                        shouldWeAddIt = false;\n                      }\n                      }\n                }\n  \n              if (shouldWeAddIt == true) {\n                finaltimes.push(data);\n              }\n           }\n  \n         for (let k=0; k<finaltimes.length; k++){\n           data = finaltimes[k];\n           let start = data[0];\n           let end = data[1];\n  \n           let start2 = new Date(start).toLocaleString('en-US', { timeZone: 'EST' });\n           let end2 = new Date(end).toLocaleString('en-US', { timeZone: 'EST' });\n  \n         }\n  \n         for (let k=0; k<newesttimes.length; k++){\n           let data = newesttimes[k];\n           finaltimes.push(data);\n         }\n  \n         for (let k=0; k<finaltimes.length; k++){\n           data = finaltimes[k];\n           let start = data[0];\n           let end = data[1];\n  \n           let start2 = new Date(start).toLocaleString('en-US', { timeZone: 'EST' });\n           let end2 = new Date(end).toLocaleString('en-US', { timeZone: 'EST' });\n  \n         }\n  \n         var allstarttimes3 = [];\n         var allendtimes3 = [];\n         for (let k=0; k<finaltimes.length; k++){\n           data = finaltimes[k];\n           let start = data[0];\n           let end = data[1];\n  \n           allstarttimes3.push(start);\n           allendtimes3.push(end);\n         }\n  \n        allstarttimes3.sort(function(a, b){return a-b});\n        allendtimes3.sort(function(a, b){return a-b});\n  \n        var finalmasterArray = [];\n  \n          for (let x = 0; x < allstarttimes3.length; x++){\n            let startTime = allstarttimes3[x];\n            let endTime = allendtimes3[x];\n  \n            let timeStartDateFormat = new Date(startTime);\n            let timeEndDateFormat = new Date(endTime);\n  \n            let prettyStartTime = timeStartDateFormat.toLocaleString('en-US', { timeZone: 'EST' });\n            let prettyEndTime = timeEndDateFormat.toLocaleString('en-US', { timeZone: 'EST' });\n  \n            let timecombo = [timeStartDateFormat, timeEndDateFormat];\n            finalmasterArray.push(timecombo);\n          }\n  \n          printPrettyTimeslots(allstarttimes3, allendtimes3, finalmasterArray);\n  \n    }\n\n    function printPrettyTimeslots(allstarttimes3, allendtimes3, finalmasterArray){\n        var awesomeArray = [];\n        let diff = ''\n        let beginfreeslot = ''\n        let endfreeslot = ''\n        let prettyStart = ''\n        let prettyEnd = ''\n        let prettyStartTime = ''\n        let prettyEndTime = ''\n        let splitStart = ''\n        let splitEnd = ''\n        let ogStart = ''\n        let ogEnd = ''\n        for (let x = 0; x < finalmasterArray.length-1; x++){\n              var times = finalmasterArray[x];\n              var curstart = times[0];\n              var curend = times[1];\n    \n              var times = finalmasterArray[x+1];\n    \n              var nextstart = times[0];\n              var nextend = times[1];\n    \n    \n              if (x==0) {\n                // First element, subtract from 8am\n                let eightAm = new Date(curstart);\n    \n                eightAm.setHours(8);\n                eightAm.setMinutes(0);\n                eightAm.setSeconds(0);\n    \n                eightAm = eightAm.getTime();\n                eightAm = new Date(eightAm);\n    \n                let diff = curstart - eightAm;\n    \n                if ((diff > 0) && (diff < 36000000)) {\n                  let beginfreeslot = eightAm;\n                  eightAm = eightAm.getTime();\n                  let endfreeslot = eightAm + diff;\n    // console.log(\"morning begin free slot (should be 8am): \" + beginfreeslot);\n    // console.log(\"morning diff should be 30 mins: \" + diff);\n    //\n    // console.log(\"morning end free slot (should be 830am): \" + endfreeslot);\n                  let prettyStart = new Date(beginfreeslot);\n                  let prettyEnd = new Date(endfreeslot);\n    \n                  let prettyStartTime = prettyStart.toLocaleString('en-US', { timeZone: 'EST' });\n                  let prettyEndTime = prettyEnd.toLocaleString('en-US', { timeZone: 'EST' });\n    \n                  let splitStart = prettyStartTime.split(\" \");\n                  let splitEnd = prettyEndTime.split(\" \");\n    \n                  let ogStart = splitStart[1];\n                  let ogEnd = splitEnd[1];\n                  awesomeArray.push([prettyStart, prettyEnd]);\n                }\n    \n    \n    \n                // final else statement is skipped on first element due to bad code\n                // copying and pasting the else so it will hit, then it will\n                // add the end time\n                diff = nextstart - curend;\n    \n                if ((diff > 0) && (diff < 36000000)) {\n                  let beginfreeslot = curend;\n                  let endfreeslot = nextstart + diff;\n                  console.log(\"correct begin free slot: \" + beginfreeslot);\n                  console.log(\"correct diff \" + diff);\n    \n                  console.log(\"correct end slot: \" + endfreeslot);\n                  let prettyStart = new Date(beginfreeslot);\n                  let prettyEnd = new Date(endfreeslot);\n    \n                  let prettyStartTime = prettyStart.toLocaleString('en-US', { timeZone: 'EST' });\n                  let prettyEndTime = prettyEnd.toLocaleString('en-US', { timeZone: 'EST' });\n    \n                  let splitStart = prettyStartTime.split(\" \");\n                  let splitEnd = prettyEndTime.split(\" \");\n    \n                  let ogStart = splitStart[1];\n                  let ogEnd = splitEnd[1];\n                  awesomeArray.push([prettyStart, prettyEnd]);\n                }\n    \n              }\n    \n              else if (x == finalmasterArray.length-2){\n                // final else statement is skipped on last element due to bad code\n                // copying and pasting the else so it will hit, then it will\n                // add the end time\n                diff = nextstart - curend;\n    \n                  if ((diff > 0) && (diff < 36000000)) {\n                  let beginfreeslot = curend;\n                  let endfreeslot = nextstart + diff;\n                  console.log(\"correct begin free slot: \" + beginfreeslot);\n                  console.log(\"correct diff \" + diff);\n    \n                  console.log(\"correct end slot: \" + endfreeslot);\n                  let prettyStart = new Date(beginfreeslot);\n                  let prettyEnd = new Date(endfreeslot);\n    \n                  let prettyStartTime = prettyStart.toLocaleString('en-US', { timeZone: 'EST' });\n                  let prettyEndTime = prettyEnd.toLocaleString('en-US', { timeZone: 'EST' });\n    \n                  let splitStart = prettyStartTime.split(\" \");\n                  let splitEnd = prettyEndTime.split(\" \");\n    \n                  let ogStart = splitStart[1];\n                  let ogEnd = splitEnd[1];\n                  awesomeArray.push([prettyStart, prettyEnd]);\n                }\n    \n                // Proceed to add final end of day -> 8 pm time slot\n                let sevenPm = new Date(curend);\n    \n                sevenPm.setHours(8+12);\n                sevenPm.setMinutes(0);\n                sevenPm.setSeconds(0);\n    \n                nextend = nextend.getTime()\n    \n                diff = sevenPm - nextend;\n    \n                if ((diff > 0) && (diff < 36000000)) {\n                  // nextend = nextend.getTime()\n                  beginfreeslot = nextend;\n                  endfreeslot = nextend + diff;\n    \n                  prettyStart = new Date(beginfreeslot);\n                  prettyEnd = new Date(endfreeslot);\n    \n                  prettyStartTime = prettyStart.toLocaleString('en-US', { timeZone: 'EST' });\n                  prettyEndTime = prettyEnd.toLocaleString('en-US', { timeZone: 'EST' });\n    \n                  splitStart = prettyStartTime.split(\" \");\n                  splitEnd = prettyEndTime.split(\" \");\n    \n                  ogStart = splitStart[1];\n                  ogEnd = splitEnd[1];\n                  awesomeArray.push([prettyStart, prettyEnd]);\n                }\n    \n    \n              }\n              else {\n                  let diff = nextstart - curend;\n    \n                  if ((diff > 0) && (diff < 36000000)) {\n                    beginfreeslot = curend;\n                    endfreeslot = nextstart + diff;\n                    console.log(\"correct begin free slot: \" + beginfreeslot);\n                    console.log(\"correct diff \" + diff);\n    \n                    console.log(\"correct end slot: \" + endfreeslot);\n                    prettyStart = new Date(beginfreeslot);\n                    prettyEnd = new Date(endfreeslot);\n    \n                    prettyStartTime = prettyStart.toLocaleString('en-US', { timeZone: 'EST' });\n                    prettyEndTime = prettyEnd.toLocaleString('en-US', { timeZone: 'EST' });\n    \n                    splitStart = prettyStartTime.split(\" \");\n                    splitEnd = prettyEndTime.split(\" \");\n    \n                    ogStart = splitStart[1];\n                    ogEnd = splitEnd[1];\n                    awesomeArray.push([prettyStart, prettyEnd]);\n                  }\n                }\n        }\n    \n        // Remove old elements in list\n        for (let x = 0; x < awesomeArray.length; x++){\n          var times = awesomeArray[x];\n          var curstart = times[0];\n          var curend = times[1];\n    \n          let curstartString = String(curstart);\n          let curendString = String(curend);\n\n          let startstring = curstart.toLocaleString('en-US', { timeZone: 'EST',  timeStyle: \"short\", dateStyle: \"short\" });\n          let endstring = curend.toLocaleString('en-US', { timeZone: 'EST',  timeStyle: \"short\", dateStyle: \"short\" });\n    \n          let startstringsplit = curstartString.split(\" \");\n          let pretty_dayofweek = startstringsplit[0]\n          let month = curstart.getMonth() + 1;\n          let day = curstart.getDate();\n    \n          let startstringsplit2 = startstring.split(\" \");\n          let pretty_starttime = startstringsplit2[1] + \" \" + startstringsplit2[2];\n          let endstringsplit2 = endstring.split(\" \");\n          let pretty_endtime = endstringsplit2[1] + \" \" + endstringsplit2[2];\n    \n          let prettystring = (pretty_dayofweek + \" \" + month + \"/\" + day + \": \" + pretty_starttime + \" to \" + pretty_endtime);\n          console.log(\"prettty\" + prettystring);\n    \n    \n          // var node = document.createElement(\"LI\");\n          //var textnode = document.createTextNode(\"[inputDate]: \" + curstart +  \" to \" + curend);\n          // var textnode = document.createTextNode(prettystring)\n          // node.appendChild(textnode);\n          // document.getElementById(\"myList\").appendChild(node);\n    \n        }\n    }\n      \n\n\n     return (\n    <div className=\"todo-container\">\n          {outputReady ? (\n          <div>\n            <h3>hi there</h3>\n          </div>\n      ) : (\n\n        <button className=\"btn-upload\" onClick={fetchFreeTimes}> Fetch free times </button>\n         \n      )}\n    <br />\n    <br />\n\n    </div>\n\n     );\n}\n\nexport default CalendarOutput;"],"mappings":"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"},"metadata":{},"sourceType":"module"}