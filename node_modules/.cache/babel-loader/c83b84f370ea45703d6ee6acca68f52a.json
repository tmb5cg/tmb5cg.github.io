{"ast":null,"code":"var _jsxFileName = \"/Users/tucker/Documents/GitHub/frontend/src/pages/Upload.js\",\n    _s = $RefreshSig$();\n\nimport DragDropFile from './DragDropFile';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Upload = () => {\n  _s();\n\n  const [processedImages, setProcessedImages] = useState(null);\n\n  if (!processedImages) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Automatically export cropped photos from your scan\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Free and no download required\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(DragDropFile, {\n        setProcessedImages: setProcessedImages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"scanningmethods\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Detected photos: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pizza\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: processedImages.map(item => {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"method-col\",\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  className: \"outputTitle\",\n                  children: \"Image \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 26,\n                  columnNumber: 68\n                }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: item,\n                  alt: \"\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 26,\n                  columnNumber: 107\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"layer\",\n                  children: \" \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 26,\n                  columnNumber: 132\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 26,\n                columnNumber: 40\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this);\n  }\n};\n\n_s(Upload, \"h+MRlSSLQKgR+fM3JSrShGtaRbc=\");\n\n_c = Upload;\nexport default Upload;\n\nvar _c;\n\n$RefreshReg$(_c, \"Upload\");","map":{"version":3,"names":["DragDropFile","useState","Upload","processedImages","setProcessedImages","map","item"],"sources":["/Users/tucker/Documents/GitHub/frontend/src/pages/Upload.js"],"sourcesContent":["import DragDropFile from './DragDropFile';\nimport { useState } from 'react'\n\n\nconst Upload = () => {\n    const [processedImages, setProcessedImages] = useState(null);\n\n    if (!processedImages) {\n        return (\n        <div>  \n\n            <h2>Automatically export cropped photos from your scan</h2>\n            <p>Free and no download required</p>\n            \n            <DragDropFile setProcessedImages={setProcessedImages}/>\n        </div>);\n    } else {\n        return (\n            <div>\n                <section className=\"scanningmethods\">\n                    <p>Detected photos: </p>\n\n                    <div className=\"pizza\"> \n                    <div className=\"row\">\n                        {processedImages.map(item => {\n                                return <div className=\"method-col\"><h3 className='outputTitle'>Image </h3><img src={item} alt=\"\" /><div className=\"layer\"> </div></div>\n                            })}\n                    </div>\n                    </div>\n                </section>\n            </div>\n        )\n    }\n};\n\nexport default Upload;\n\n\n"],"mappings":";;;AAAA,OAAOA,YAAP,MAAyB,gBAAzB;AACA,SAASC,QAAT,QAAyB,OAAzB;;;AAGA,MAAMC,MAAM,GAAG,MAAM;EAAA;;EACjB,MAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCH,QAAQ,CAAC,IAAD,CAAtD;;EAEA,IAAI,CAACE,eAAL,EAAsB;IAClB,oBACA;MAAA,wBAEI;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAFJ,eAGI;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAHJ,eAKI,QAAC,YAAD;QAAc,kBAAkB,EAAEC;MAAlC;QAAA;QAAA;QAAA;MAAA,QALJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADA;EAQH,CATD,MASO;IACH,oBACI;MAAA,uBACI;QAAS,SAAS,EAAC,iBAAnB;QAAA,wBACI;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADJ,eAGI;UAAK,SAAS,EAAC,OAAf;UAAA,uBACA;YAAK,SAAS,EAAC,KAAf;YAAA,UACKD,eAAe,CAACE,GAAhB,CAAoBC,IAAI,IAAI;cACrB,oBAAO;gBAAK,SAAS,EAAC,YAAf;gBAAA,wBAA4B;kBAAI,SAAS,EAAC,aAAd;kBAAA;gBAAA;kBAAA;kBAAA;kBAAA;gBAAA,QAA5B,eAAmE;kBAAK,GAAG,EAAEA,IAAV;kBAAgB,GAAG,EAAC;gBAApB;kBAAA;kBAAA;kBAAA;gBAAA,QAAnE,eAA4F;kBAAK,SAAS,EAAC,OAAf;kBAAA;gBAAA;kBAAA;kBAAA;kBAAA;gBAAA,QAA5F;cAAA;gBAAA;gBAAA;gBAAA;cAAA,QAAP;YACH,CAFJ;UADL;YAAA;YAAA;YAAA;UAAA;QADA;UAAA;UAAA;UAAA;QAAA,QAHJ;MAAA;QAAA;QAAA;QAAA;MAAA;IADJ;MAAA;MAAA;MAAA;IAAA,QADJ;EAeH;AACJ,CA7BD;;GAAMJ,M;;KAAAA,M;AA+BN,eAAeA,MAAf"},"metadata":{},"sourceType":"module"}