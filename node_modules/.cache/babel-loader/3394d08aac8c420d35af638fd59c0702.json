{"ast":null,"code":"var _jsxFileName = \"/Users/tucker/Documents/GitHub/tmb5cg.github.io/src/components/FreeTimeFinder/CalendarOutput.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Calendar from './Calendar.js';\nimport format from \"date-fns/format\";\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CalendarOutput = props => {\n  _s();\n\n  const [freeTimes, setFreeTimes] = useState(); // const [outputReady, setOutputReady] = useState(false)\n\n  const allStartTimes = [];\n  const allEndTimes = [];\n  const busyBlocksToAdd = [];\n\n  const fetchFreeTimes = () => {\n    // Check if endDate is set, if not set to startDate\n    // Format start date to 8am\n    var start = new Date(props.startDate);\n    start.setHours(8);\n    start.setMinutes(0);\n    start.setSeconds(0);\n    start = start.toISOString(); // Format end date to 8 pm\n\n    let end = '';\n\n    if (props.endDate === null) {\n      end = new Date(props.startDate);\n      const piza = new Date(props.startDate);\n      props.setEndDate(piza);\n      end = new Date(piza);\n    } else {\n      end = new Date(props.endDate);\n    }\n\n    end.setHours(20);\n    end.setMinutes(0);\n    end.setSeconds(0);\n    end = end.toISOString();\n    console.log(start);\n    console.log(end); // Build request body\n\n    const request = {};\n    request.timeMin = start;\n    request.timeMax = end;\n    request.timeZone = \"America/New_York\"; // Create calendars object\n\n    let cals = [];\n\n    for (let i = 0; i < props.selectedCalendars.length; i++) {\n      let calObj = {};\n      calObj.id = props.selectedCalendars[i];\n      cals.push(calObj);\n    }\n\n    request.items = cals;\n    let num_days = '';\n\n    if (props.endDate === null) {\n      console.log(\"we here\");\n      let num_days = props.startDate.getDate() - props.startDate.getDate();\n    } else {\n      let num_days = props.endDate.getDate() - props.startDate.getDate();\n    } // for each day in between input dates, add event\n    // day1 8am 830am, 8pm to day2 8am\n\n\n    for (let x = 0; x < num_days; x++) {\n      let day = props.startDate.getDate();\n      let curDateDay = day + x;\n      let inputDate = props.startDate; //appendPre(curDateDay)\n\n      let morningBusyStart = new Date();\n      morningBusyStart.setDate(curDateDay);\n      morningBusyStart.setHours(8);\n      morningBusyStart.setMinutes(0);\n      morningBusyStart.setSeconds(0);\n      morningBusyStart.setFullYear(inputDate.getFullYear());\n      let morningBusyEnd = new Date();\n      morningBusyEnd.setDate(curDateDay);\n      morningBusyEnd.setHours(8);\n      morningBusyEnd.setMinutes(30);\n      morningBusyEnd.setSeconds(0);\n      morningBusyEnd.setFullYear(inputDate.getFullYear());\n      let nightBusyStart = new Date();\n      nightBusyStart.setDate(curDateDay);\n      nightBusyStart.setHours(20);\n      nightBusyStart.setMinutes(0);\n      nightBusyStart.setSeconds(0);\n      nightBusyStart.setFullYear(inputDate.getFullYear());\n      let nightBusyEnd = new Date();\n      nightBusyEnd.setDate(curDateDay);\n      nightBusyEnd.setHours(20);\n      nightBusyEnd.setMinutes(30);\n      nightBusyEnd.setSeconds(0);\n      nightBusyEnd.setFullYear(inputDate.getFullYear()); // prettyStartTime = morningBusyStart.toLocaleString('en-US', { timeZone: 'EST' });\n      // prettyEndTime = morningBusyEnd.toLocaleString('en-US', { timeZone: 'EST' });\n\n      var morningBusyStart_formatted = {\n        date: morningBusyStart\n      };\n      var morningBusyEnd_formatted = {\n        date: morningBusyEnd\n      };\n      var nightBusyStart_formatted = {\n        date: nightBusyStart\n      };\n      var nightBusyEnd_formatted = {\n        date: nightBusyEnd\n      };\n      allStartTimes.push(morningBusyStart_formatted);\n      allEndTimes.push(morningBusyEnd_formatted);\n      allStartTimes.push(nightBusyStart_formatted);\n      allEndTimes.push(nightBusyEnd_formatted);\n      let timecombo = [morningBusyStart, morningBusyEnd];\n      busyBlocksToAdd.push(timecombo);\n    }\n\n    return gapi.client.calendar.freebusy.query(request).then(function (response) {\n      for (let k = 0; k < props.selectedCalendars.length; k++) {\n        var curCal = props.selectedCalendars[k];\n        var busyTimes = response.result.calendars[curCal].busy;\n\n        for (let i = 0; i < busyTimes.length; i++) {\n          var busyBlock = busyTimes[i];\n          console.log(\"Busy block for \" + curCal, busyBlock);\n          var startTime = busyBlock.start;\n          var endTime = busyBlock.end;\n          var data = {\n            date: startTime\n          };\n          var data2 = {\n            date: endTime\n          };\n          allStartTimes.push(data);\n          allEndTimes.push(data2);\n        }\n      }\n\n      console.log(all);\n      consolidateAllBusyTimes();\n    }, function (err) {\n      console.error(\"Execute error\", err);\n    });\n  };\n\n  const consolidateAllBusyTimes = () => {\n    allStartTimes.sort(function (a, b) {\n      var c = new Date(a.date);\n      var d = new Date(b.date);\n      return c - d;\n    }); //    appendPre(\"- - - - - - - Sorting end times\")\n\n    allEndTimes.sort(function (a, b) {\n      var c = new Date(a.date);\n      var d = new Date(b.date);\n      return c - d;\n    });\n    let startTimes = allStartTimes;\n    let endTimes = allEndTimes;\n    var masterArray = [];\n\n    for (let x = 0; x < startTimes.length; x++) {\n      let startTime = startTimes[x].date;\n      let endTime = endTimes[x].date;\n      let timeStartDateFormat = new Date(startTime);\n      let timeEndDateFormat = new Date(endTime);\n      let prettyStartTime = timeStartDateFormat.toLocaleString('en-US', {\n        timeZone: 'EST'\n      });\n      let prettyEndTime = timeEndDateFormat.toLocaleString('en-US', {\n        timeZone: 'EST'\n      });\n      let timecombo = [timeStartDateFormat, timeEndDateFormat];\n      masterArray.push(timecombo);\n    }\n\n    for (let k = 0; k < masterArray.length; k++) {\n      let data = masterArray[k];\n      let start = data[0];\n      let end = data[1];\n      let start2 = new Date(start).toLocaleString('en-US', {\n        timeZone: 'EST'\n      });\n      let end2 = new Date(end).toLocaleString('en-US', {\n        timeZone: 'EST'\n      });\n      console.log(k + \" Start: \" + start2 + \" || End: \" + end2);\n    } // STEP 1 merge all same start times\n\n\n    var newtimes = [];\n\n    for (let x = 0; x < masterArray.length; x++) {\n      var data = masterArray[x];\n      var curstart = data[0].getTime();\n      var curend = data[1].getTime();\n      var latestend = curend;\n\n      for (let i = 0; i < masterArray.length; i++) {\n        var data2 = masterArray[i];\n        var start2 = data2[0].getTime();\n        var end2 = data2[1].getTime();\n\n        if (curstart == start2) {\n          if (latestend < end2) {\n            latestend = end2;\n          }\n        }\n      }\n\n      let newtime = [curstart, latestend];\n      var shouldWeAddIt = true;\n\n      for (let k = 0; k < newtimes.length; k++) {\n        let data = newtimes[k];\n        let start = data[0];\n        let end = data[1];\n\n        if (start == curstart) {\n          if (end == latestend) {\n            shouldWeAddIt = false;\n          }\n        } else {}\n      }\n\n      if (shouldWeAddIt) {\n        newtimes.push(newtime);\n      }\n    } // print OG array\n    //\n    //  appendPre(\"Merging same start times\");\n\n\n    for (let k = 0; k < newtimes.length; k++) {\n      let data = newtimes[k];\n      let start = data[0];\n      let end = data[1];\n      start2 = new Date(start).toLocaleString('en-US', {\n        timeZone: 'EST'\n      });\n      end2 = new Date(end).toLocaleString('en-US', {\n        timeZone: 'EST'\n      }); //appendPre(k + \" Start: \" + start2 + \" || End: \" + end2);\n    } // STEP 2  Remove times within larger time blocks\n\n\n    var newertimes = [];\n\n    for (let x = 0; x < newtimes.length; x++) {\n      var data = newtimes[x];\n      var curstart = data[0];\n      var curend = data[1];\n      var latestend = curend;\n      var shouldAdd = true;\n\n      for (let i = 0; i < newtimes.length; i++) {\n        var data2 = newtimes[i];\n        var start2 = data2[0];\n        var end2 = data2[1];\n\n        if (start2 < curstart) {\n          if (end2 > curend) {\n            shouldAdd = false;\n          }\n        }\n      }\n\n      let newtime = [curstart, curend];\n\n      if (shouldAdd) {\n        newertimes.push(newtime);\n      }\n    } // STEP 2 printing results\n    //  appendPre(\"TIMES WITH OVERLAPPING BLOCKS REMOVED: \" + newertimes);\n\n\n    for (let k = 0; k < newertimes.length; k++) {\n      data = newertimes[k];\n      let start = data[0];\n      let end = data[1];\n      let start2 = new Date(start).toLocaleString('en-US', {\n        timeZone: 'EST'\n      });\n      let end2 = new Date(end).toLocaleString('en-US', {\n        timeZone: 'EST'\n      });\n    } // STEP  3 FINAL STEP - consolidate back to back events\n\n\n    var newesttimes = [];\n    var removedtimes = [];\n\n    for (let x = 0; x < newertimes.length; x++) {\n      var data = newertimes[x];\n      var curstart = data[0];\n      var curend = data[1];\n\n      for (let i = 0; i < newertimes.length; i++) {\n        var data2 = newertimes[i];\n        var start2 = data2[0];\n        var end2 = data2[1];\n\n        if (curend > start2) {\n          if (curend < end2) {\n            let newtime = [curstart, end2];\n            newesttimes.push(newtime);\n            removedtimes.push([curstart, curend]);\n            removedtimes.push([start2, end2]);\n          }\n        }\n      }\n    } // STEP 3 printing results\n\n\n    for (let k = 0; k < newesttimes.length; k++) {\n      data = newesttimes[k];\n      let start = data[0];\n      let end = data[1];\n      let start2 = new Date(start).toLocaleString('en-US', {\n        timeZone: 'EST'\n      });\n      let end2 = new Date(end).toLocaleString('en-US', {\n        timeZone: 'EST'\n      });\n    } // more printing results\n\n\n    for (let k = 0; k < removedtimes.length; k++) {\n      data = removedtimes[k];\n      let start = data[0];\n      let end = data[1];\n      let start2 = new Date(start).toLocaleString('en-US', {\n        timeZone: 'EST'\n      });\n      let end2 = new Date(end).toLocaleString('en-US', {\n        timeZone: 'EST'\n      });\n    } // Adding consolidated times together, finishing up etc\n\n\n    var finaltimes = [];\n\n    for (let k = 0; k < newertimes.length; k++) {\n      data = newertimes[k];\n      let start = data[0];\n      let end = data[1];\n      var shouldWeAddIt = true;\n\n      for (let x = 0; x < removedtimes.length; x++) {\n        let data2 = removedtimes[x];\n        let start2 = data2[0];\n        let end2 = data2[1];\n\n        if (start2 == start) {\n          if (end2 == end) {\n            shouldWeAddIt = false;\n          }\n        }\n      }\n\n      if (shouldWeAddIt == true) {\n        finaltimes.push(data);\n      }\n    }\n\n    for (let k = 0; k < finaltimes.length; k++) {\n      data = finaltimes[k];\n      let start = data[0];\n      let end = data[1];\n      let start2 = new Date(start).toLocaleString('en-US', {\n        timeZone: 'EST'\n      });\n      let end2 = new Date(end).toLocaleString('en-US', {\n        timeZone: 'EST'\n      });\n    }\n\n    for (let k = 0; k < newesttimes.length; k++) {\n      let data = newesttimes[k];\n      finaltimes.push(data);\n    }\n\n    for (let k = 0; k < finaltimes.length; k++) {\n      data = finaltimes[k];\n      let start = data[0];\n      let end = data[1];\n      let start2 = new Date(start).toLocaleString('en-US', {\n        timeZone: 'EST'\n      });\n      let end2 = new Date(end).toLocaleString('en-US', {\n        timeZone: 'EST'\n      });\n    }\n\n    var allstarttimes3 = [];\n    var allendtimes3 = [];\n\n    for (let k = 0; k < finaltimes.length; k++) {\n      data = finaltimes[k];\n      let start = data[0];\n      let end = data[1];\n      allstarttimes3.push(start);\n      allendtimes3.push(end);\n    }\n\n    allstarttimes3.sort(function (a, b) {\n      return a - b;\n    });\n    allendtimes3.sort(function (a, b) {\n      return a - b;\n    });\n    var finalmasterArray = [];\n\n    for (let x = 0; x < allstarttimes3.length; x++) {\n      let startTime = allstarttimes3[x];\n      let endTime = allendtimes3[x];\n      let timeStartDateFormat = new Date(startTime);\n      let timeEndDateFormat = new Date(endTime);\n      let prettyStartTime = timeStartDateFormat.toLocaleString('en-US', {\n        timeZone: 'EST'\n      });\n      let prettyEndTime = timeEndDateFormat.toLocaleString('en-US', {\n        timeZone: 'EST'\n      });\n      let timecombo = [timeStartDateFormat, timeEndDateFormat];\n      finalmasterArray.push(timecombo);\n    }\n\n    printPrettyTimeslots(allstarttimes3, allendtimes3, finalmasterArray);\n  };\n\n  function printPrettyTimeslots(allstarttimes3, allendtimes3, finalmasterArray) {\n    var awesomeArray = [];\n    let diff = '';\n    let beginfreeslot = '';\n    let endfreeslot = '';\n    let prettyStart = '';\n    let prettyEnd = '';\n    let prettyStartTime = '';\n    let prettyEndTime = '';\n    let splitStart = '';\n    let splitEnd = '';\n    let ogStart = '';\n    let ogEnd = '';\n\n    for (let x = 0; x < finalmasterArray.length - 1; x++) {\n      var times = finalmasterArray[x];\n      var curstart = times[0];\n      var curend = times[1];\n      var times = finalmasterArray[x + 1];\n      var nextstart = times[0];\n      var nextend = times[1];\n\n      if (x == 0) {\n        // First element, subtract from 8am\n        let eightAm = new Date(curstart);\n        eightAm.setHours(8);\n        eightAm.setMinutes(0);\n        eightAm.setSeconds(0);\n        eightAm = eightAm.getTime();\n        eightAm = new Date(eightAm);\n        let diff = curstart - eightAm;\n\n        if (diff > 0 && diff < 36000000) {\n          let beginfreeslot = eightAm;\n          eightAm = eightAm.getTime();\n          let endfreeslot = eightAm + diff;\n          let prettyStart = new Date(beginfreeslot);\n          let prettyEnd = new Date(endfreeslot);\n          let prettyStartTime = prettyStart.toLocaleString('en-US', {\n            timeZone: 'EST'\n          });\n          let prettyEndTime = prettyEnd.toLocaleString('en-US', {\n            timeZone: 'EST'\n          });\n          let splitStart = prettyStartTime.split(\" \");\n          let splitEnd = prettyEndTime.split(\" \");\n          let ogStart = splitStart[1];\n          let ogEnd = splitEnd[1];\n          awesomeArray.push([prettyStart, prettyEnd]);\n        }\n\n        diff = nextstart - curend;\n\n        if (diff > 0 && diff < 36000000) {\n          let beginfreeslot = curend;\n          let endfreeslot = nextstart + diff;\n          let prettyStart = new Date(beginfreeslot);\n          let prettyEnd = new Date(endfreeslot);\n          let prettyStartTime = prettyStart.toLocaleString('en-US', {\n            timeZone: 'EST'\n          });\n          let prettyEndTime = prettyEnd.toLocaleString('en-US', {\n            timeZone: 'EST'\n          });\n          let splitStart = prettyStartTime.split(\" \");\n          let splitEnd = prettyEndTime.split(\" \");\n          let ogStart = splitStart[1];\n          let ogEnd = splitEnd[1];\n          awesomeArray.push([prettyStart, prettyEnd]);\n        }\n      } else if (x == finalmasterArray.length - 2) {\n        diff = nextstart - curend;\n\n        if (diff > 0 && diff < 36000000) {\n          let beginfreeslot = curend;\n          let endfreeslot = nextstart + diff;\n          let prettyStart = new Date(beginfreeslot);\n          let prettyEnd = new Date(endfreeslot);\n          let prettyStartTime = prettyStart.toLocaleString('en-US', {\n            timeZone: 'EST'\n          });\n          let prettyEndTime = prettyEnd.toLocaleString('en-US', {\n            timeZone: 'EST'\n          });\n          let splitStart = prettyStartTime.split(\" \");\n          let splitEnd = prettyEndTime.split(\" \");\n          let ogStart = splitStart[1];\n          let ogEnd = splitEnd[1];\n          awesomeArray.push([prettyStart, prettyEnd]);\n        } // Proceed to add final end of day -> 8 pm time slot\n\n\n        let sevenPm = new Date(curend);\n        sevenPm.setHours(8 + 12);\n        sevenPm.setMinutes(0);\n        sevenPm.setSeconds(0);\n        nextend = nextend.getTime();\n        diff = sevenPm - nextend;\n\n        if (diff > 0 && diff < 36000000) {\n          // nextend = nextend.getTime()\n          beginfreeslot = nextend;\n          endfreeslot = nextend + diff;\n          prettyStart = new Date(beginfreeslot);\n          prettyEnd = new Date(endfreeslot);\n          prettyStartTime = prettyStart.toLocaleString('en-US', {\n            timeZone: 'EST'\n          });\n          prettyEndTime = prettyEnd.toLocaleString('en-US', {\n            timeZone: 'EST'\n          });\n          splitStart = prettyStartTime.split(\" \");\n          splitEnd = prettyEndTime.split(\" \");\n          ogStart = splitStart[1];\n          ogEnd = splitEnd[1];\n          awesomeArray.push([prettyStart, prettyEnd]);\n        }\n      } else {\n        let diff = nextstart - curend;\n\n        if (diff > 0 && diff < 36000000) {\n          beginfreeslot = curend;\n          endfreeslot = nextstart + diff;\n          prettyStart = new Date(beginfreeslot);\n          prettyEnd = new Date(endfreeslot);\n          prettyStartTime = prettyStart.toLocaleString('en-US', {\n            timeZone: 'EST'\n          });\n          prettyEndTime = prettyEnd.toLocaleString('en-US', {\n            timeZone: 'EST'\n          });\n          splitStart = prettyStartTime.split(\" \");\n          splitEnd = prettyEndTime.split(\" \");\n          ogStart = splitStart[1];\n          ogEnd = splitEnd[1];\n          awesomeArray.push([prettyStart, prettyEnd]);\n        }\n      }\n    } // Remove old elements in list\n\n\n    console.log(\"awesome array\");\n    console.log(awesomeArray);\n    var finalArr = [];\n\n    for (let x = 0; x < awesomeArray.length; x++) {\n      var times = awesomeArray[x];\n      var curstart = times[0];\n      curstart = new Date(curstart.setHours(curstart.getHours() + 0));\n      var curend = times[1];\n      curend = new Date(curend.setHours(curend.getHours() + 0));\n      var comb = [curstart, curend];\n      finalArr.push(comb);\n      let curstartString = String(curstart);\n      let curendString = String(curend);\n      let startstring = curstart.toLocaleString('en-US', {\n        timeZone: 'EST',\n        timeStyle: \"short\",\n        dateStyle: \"short\"\n      });\n      let endstring = curend.toLocaleString('en-US', {\n        timeZone: 'EST',\n        timeStyle: \"short\",\n        dateStyle: \"short\"\n      });\n      let startstringsplit = curstartString.split(\" \");\n      let pretty_dayofweek = startstringsplit[0];\n      let month = curstart.getMonth() + 1;\n      let day = curstart.getDate();\n      let startstringsplit2 = startstring.split(\" \");\n      let pretty_starttime = startstringsplit2[1] + \" \" + startstringsplit2[2];\n      let endstringsplit2 = endstring.split(\" \");\n      let pretty_endtime = endstringsplit2[1] + \" \" + endstringsplit2[2];\n      let prettystring = pretty_dayofweek + \" \" + month + \"/\" + day + \": \" + pretty_starttime + \" to \" + pretty_endtime;\n      console.log(\"prettty\" + prettystring);\n    }\n\n    console.log(finalArr);\n    setFreeTimes(finalArr);\n    finishUp(finalArr);\n  }\n\n  const unique_days = [];\n\n  const finishUp = finalArr => {\n    // const unique_days = []\n    const temp = finalArr.map((obj, i, arr) => {\n      const xx = getDate(obj[0]);\n\n      if (unique_days.includes(String(xx)) === false) {\n        unique_days.push(String(xx));\n      } else {\n        return 'ignore';\n      }\n    });\n    const motherToEndAll = [];\n\n    for (let i = 0; i < unique_days.length; i++) {\n      const thisDay = unique_days[i];\n      const dkl = new Date(thisDay);\n      const hihi = dkl.toLocaleDateString();\n      const thisDayTimes = [];\n\n      for (let j = 0; j < finalArr.length; j++) {\n        const dayObj = finalArr[j];\n        const firstTime = dayObj[0];\n        const secondTime = dayObj[1];\n        const startDay2 = removeTime(firstTime);\n        const freeTimeSlot = {};\n\n        if (String(startDay2) === String(thisDay)) {\n          const freeTimeSlot = [];\n          const temp1 = String(dayObj[0].toLocaleString());\n          const splitted1 = temp1.split(\" \");\n          freeTimeSlot.start = String(splitted1[1] + \" \" + splitted1[2]);\n          const temp = String(dayObj[1].toLocaleString());\n          const splitted = temp.split(\" \");\n          freeTimeSlot.end = String(splitted[1] + \" \" + splitted[2]);\n          thisDayTimes.push(freeTimeSlot);\n        }\n      }\n\n      const finalDolphin = [hihi, thisDayTimes];\n      motherToEndAll.push(finalDolphin);\n    }\n\n    console.log(\"hard yeet\");\n    console.log(motherToEndAll);\n    setFreeTimes(motherToEndAll);\n    props.setOutputReady(true);\n  };\n\n  function removeTime() {\n    let date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();\n    return new Date(date.toDateString());\n  }\n\n  const getDate = inputDate => {\n    const d = new Date(inputDate);\n    const dods = removeTime(d);\n    return dods;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todo-container\",\n    children: [props.outputReady ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: freeTimes.map(test => {\n        console.log(\"yoyoyoyo\");\n        const thisDate = test[0];\n        const thisDateTimeSlots = test[1];\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: [thisDate, \":\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 698,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: thisDateTimeSlots.map(item => {\n                console.log(\"item here\");\n                console.log(item);\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: [item.start, \" to \", item.end]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 705,\n                    columnNumber: 29\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 704,\n                  columnNumber: 29\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 699,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 697,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 696,\n          columnNumber: 9\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 689,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn-upload\",\n      onClick: fetchFreeTimes,\n      children: \" Fetch free times \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 720,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 723,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 724,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 687,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CalendarOutput, \"DJ6JTRgv6EuA/Jm8jQ8tceQuON4=\");\n\n_c = CalendarOutput;\nexport default CalendarOutput;\n\nvar _c;\n\n$RefreshReg$(_c, \"CalendarOutput\");","map":{"version":3,"names":["React","Calendar","format","useState","useEffect","CalendarOutput","props","freeTimes","setFreeTimes","allStartTimes","allEndTimes","busyBlocksToAdd","fetchFreeTimes","start","Date","startDate","setHours","setMinutes","setSeconds","toISOString","end","endDate","piza","setEndDate","console","log","request","timeMin","timeMax","timeZone","cals","i","selectedCalendars","length","calObj","id","push","items","num_days","getDate","x","day","curDateDay","inputDate","morningBusyStart","setDate","setFullYear","getFullYear","morningBusyEnd","nightBusyStart","nightBusyEnd","morningBusyStart_formatted","date","morningBusyEnd_formatted","nightBusyStart_formatted","nightBusyEnd_formatted","timecombo","gapi","client","calendar","freebusy","query","then","response","k","curCal","busyTimes","result","calendars","busy","busyBlock","startTime","endTime","data","data2","all","consolidateAllBusyTimes","err","error","sort","a","b","c","d","startTimes","endTimes","masterArray","timeStartDateFormat","timeEndDateFormat","prettyStartTime","toLocaleString","prettyEndTime","start2","end2","newtimes","curstart","getTime","curend","latestend","newtime","shouldWeAddIt","newertimes","shouldAdd","newesttimes","removedtimes","finaltimes","allstarttimes3","allendtimes3","finalmasterArray","printPrettyTimeslots","awesomeArray","diff","beginfreeslot","endfreeslot","prettyStart","prettyEnd","splitStart","splitEnd","ogStart","ogEnd","times","nextstart","nextend","eightAm","split","sevenPm","finalArr","getHours","comb","curstartString","String","curendString","startstring","timeStyle","dateStyle","endstring","startstringsplit","pretty_dayofweek","month","getMonth","startstringsplit2","pretty_starttime","endstringsplit2","pretty_endtime","prettystring","finishUp","unique_days","temp","map","obj","arr","xx","includes","motherToEndAll","thisDay","dkl","hihi","toLocaleDateString","thisDayTimes","j","dayObj","firstTime","secondTime","startDay2","removeTime","freeTimeSlot","temp1","splitted1","splitted","finalDolphin","setOutputReady","toDateString","dods","outputReady","test","thisDate","thisDateTimeSlots","item"],"sources":["/Users/tucker/Documents/GitHub/tmb5cg.github.io/src/components/FreeTimeFinder/CalendarOutput.js"],"sourcesContent":["import React from 'react';\nimport Calendar from './Calendar.js'\nimport format from \"date-fns/format\";\nimport { useState, useEffect} from 'react'\n\n\nconst CalendarOutput = (props) => {\n\n  const [freeTimes, setFreeTimes] = useState()\n  // const [outputReady, setOutputReady] = useState(false)\n\n    const allStartTimes = [];\n    const allEndTimes = [];\n    const busyBlocksToAdd = [];\n\n    const fetchFreeTimes = () => {\n      // Check if endDate is set, if not set to startDate\n\n        // Format start date to 8am\n        var start = new Date(props.startDate)\n        start.setHours(8)\n        start.setMinutes(0)\n        start.setSeconds(0)\n        start = start.toISOString();\n\n        // Format end date to 8 pm\n        let end = ''\n        if (props.endDate === null) {\n          end = new Date(props.startDate)\n          const piza = new Date(props.startDate)\n          props.setEndDate(piza)\n          end = new Date(piza)\n        } else {\n          end = new Date(props.endDate)\n        }\n        end.setHours(20)\n        end.setMinutes(0)\n        end.setSeconds(0)\n        end = end.toISOString();\n        \n        console.log(start)\n        console.log(end)\n\n        // Build request body\n        const request = {}\n        request.timeMin = start;\n        request.timeMax = end;\n        request.timeZone = \"America/New_York\";\n\n        // Create calendars object\n        let cals = []\n        for (let i=0; i<props.selectedCalendars.length; i++){\n            let calObj = {}\n            calObj.id = props.selectedCalendars[i]\n            cals.push(calObj)\n        }\n\n        request.items = cals\n\n        let num_days = ''\n        if (props.endDate === null) {\n          console.log(\"we here\")\n          let num_days = props.startDate.getDate() - props.startDate.getDate()\n        } else {\n          let num_days = props.endDate.getDate() - props.startDate.getDate()\n        }\n\n        // for each day in between input dates, add event\n        // day1 8am 830am, 8pm to day2 8am\n        for (let x=0; x < num_days; x++){\n            let day = props.startDate.getDate()\n\n            let curDateDay = day + x\n            let inputDate = props.startDate\n\n            //appendPre(curDateDay)\n            let morningBusyStart = new Date()\n            morningBusyStart.setDate(curDateDay)\n            morningBusyStart.setHours(8)\n            morningBusyStart.setMinutes(0)\n            morningBusyStart.setSeconds(0)\n            morningBusyStart.setFullYear(inputDate.getFullYear())\n\n            let morningBusyEnd = new Date()\n            morningBusyEnd.setDate(curDateDay)\n            morningBusyEnd.setHours(8)\n            morningBusyEnd.setMinutes(30)\n            morningBusyEnd.setSeconds(0)\n            morningBusyEnd.setFullYear(inputDate.getFullYear())\n\n\n            let nightBusyStart = new Date()\n            nightBusyStart.setDate(curDateDay)\n            nightBusyStart.setHours(20)\n            nightBusyStart.setMinutes(0)\n            nightBusyStart.setSeconds(0)\n            nightBusyStart.setFullYear(inputDate.getFullYear())\n\n            let nightBusyEnd = new Date()\n            nightBusyEnd.setDate(curDateDay)\n            nightBusyEnd.setHours(20)\n            nightBusyEnd.setMinutes(30)\n            nightBusyEnd.setSeconds(0)\n            nightBusyEnd.setFullYear(inputDate.getFullYear())\n\n            // prettyStartTime = morningBusyStart.toLocaleString('en-US', { timeZone: 'EST' });\n            // prettyEndTime = morningBusyEnd.toLocaleString('en-US', { timeZone: 'EST' });\n            var morningBusyStart_formatted = {date: morningBusyStart};\n            var morningBusyEnd_formatted = {date: morningBusyEnd};\n\n            var nightBusyStart_formatted = {date: nightBusyStart};\n            var nightBusyEnd_formatted = {date: nightBusyEnd};\n\n            allStartTimes.push(morningBusyStart_formatted);\n            allEndTimes.push(morningBusyEnd_formatted);\n\n            allStartTimes.push(nightBusyStart_formatted);\n            allEndTimes.push(nightBusyEnd_formatted);\n\n            let timecombo = [morningBusyStart, morningBusyEnd];\n            busyBlocksToAdd.push(timecombo);\n\n        }\n        return gapi.client.calendar.freebusy.query(request)\n      \n              .then(function(response) {\n                for (let k = 0; k < props.selectedCalendars.length; k++) {\n                    var curCal = props.selectedCalendars[k];\n                    var busyTimes = response.result.calendars[curCal].busy;\n        \n                    for (let i = 0; i < busyTimes.length; i++){\n                      var busyBlock = busyTimes[i];\n                      console.log(\"Busy block for \" + curCal, busyBlock);\n        \n                      var startTime = busyBlock.start;\n                      var endTime = busyBlock.end;\n        \n                      var data = {date: startTime};\n                      var data2 = {date: endTime};\n        \n                      allStartTimes.push(data);\n                      allEndTimes.push(data2);\n        \n                    }\n                  }\n\n                  console.log(all)\n                consolidateAllBusyTimes();\n              },\n              function(err) { console.error(\"Execute error\", err); });\n      }\n\n\n      const consolidateAllBusyTimes = () => {\n        allStartTimes.sort(function(a, b) {\n          var c = new Date(a.date);\n          var d = new Date(b.date);\n          return c-d;\n      });\n  \n      //    appendPre(\"- - - - - - - Sorting end times\")\n  \n      allEndTimes.sort(function(a, b) {\n        var c = new Date(a.date);\n        var d = new Date(b.date);\n        return c-d;\n      });\n  \n        let startTimes = allStartTimes;\n        let endTimes = allEndTimes;\n\n      var masterArray = [];\n        for (let x = 0; x < startTimes.length; x++){\n          let startTime = startTimes[x].date;\n          let endTime = endTimes[x].date;\n  \n          let timeStartDateFormat = new Date(startTime);\n          let timeEndDateFormat = new Date(endTime);\n  \n          let prettyStartTime = timeStartDateFormat.toLocaleString('en-US', { timeZone: 'EST' });\n          let prettyEndTime = timeEndDateFormat.toLocaleString('en-US', { timeZone: 'EST' });\n  \n          let timecombo = [timeStartDateFormat, timeEndDateFormat];\n          masterArray.push(timecombo);\n        }\n\n        for (let k=0; k<masterArray.length;k++){\n          let data = masterArray[k];\n          let start = data[0];\n          let end = data[1];\n  \n          let start2 = new Date(start).toLocaleString('en-US', { timeZone: 'EST' });\n          let end2 = new Date(end).toLocaleString('en-US', { timeZone: 'EST' });\n  \n          console.log(k + \" Start: \" + start2 + \" || End: \" + end2);\n        }\n\n        // STEP 1 merge all same start times\n        var newtimes = [];\n        for (let x = 0; x < masterArray.length; x++){\n              var data = masterArray[x];\n  \n              var curstart = data[0].getTime();\n              var curend = data[1].getTime();\n  \n              var latestend = curend;\n  \n              for (let i = 0; i < masterArray.length; i++){\n                var data2 = masterArray[i];\n  \n                var start2 = data2[0].getTime();\n                var end2 = data2[1].getTime();\n                if (curstart == start2) {\n                      if (latestend < end2) {\n                        latestend = end2;\n                      }\n                }\n              }\n  \n              let newtime = [curstart, latestend];\n  \n              var shouldWeAddIt = true;\n              for (let k=0; k<newtimes.length;k++){\n                let data = newtimes[k];\n                let start = data[0];\n                let end = data[1];\n  \n                if (start == curstart){\n                  if (end == latestend) {\n                    shouldWeAddIt = false;\n                  }\n                } else {\n                }\n              }\n  \n              if (shouldWeAddIt){\n                newtimes.push(newtime);\n              }\n          }\n  \n          // print OG array\n        //\n      //  appendPre(\"Merging same start times\");\n          for (let k=0; k<newtimes.length;k++){\n            let data = newtimes[k];\n            let start = data[0];\n            let end = data[1];\n  \n            start2 = new Date(start).toLocaleString('en-US', { timeZone: 'EST' });\n            end2 = new Date(end).toLocaleString('en-US', { timeZone: 'EST' });\n  \n            //appendPre(k + \" Start: \" + start2 + \" || End: \" + end2);\n          }\n  \n        // STEP 2  Remove times within larger time blocks\n        var newertimes = [];\n        for (let x = 0; x < newtimes.length; x++){\n              var data = newtimes[x];\n  \n              var curstart = data[0]\n              var curend = data[1]\n              var latestend = curend;\n  \n              var shouldAdd = true;\n              for (let i = 0; i < newtimes.length; i++){\n                var data2 = newtimes[i];\n                var start2 = data2[0]\n                var end2 = data2[1]\n  \n                if (start2 < curstart) {\n                  if (end2 > curend){\n                    shouldAdd = false;\n                  }\n                }\n  \n              }\n  \n              let newtime = [curstart, curend];\n  \n              if (shouldAdd) {\n                newertimes.push(newtime);\n              }\n          }\n  \n  \n              // STEP 2 printing results\n            //  appendPre(\"TIMES WITH OVERLAPPING BLOCKS REMOVED: \" + newertimes);\n              for (let k=0; k<newertimes.length;k++){\n                data = newertimes[k];\n                let start = data[0];\n                let end = data[1];\n  \n                let start2 = new Date(start).toLocaleString('en-US', { timeZone: 'EST' });\n                let end2 = new Date(end).toLocaleString('en-US', { timeZone: 'EST' });\n  \n              }\n  \n          // STEP  3 FINAL STEP - consolidate back to back events\n          var newesttimes = [];\n          var removedtimes = [];\n          for (let x = 0; x < newertimes.length; x++){\n                var data = newertimes[x];\n  \n                var curstart = data[0];\n                var curend = data[1];\n  \n                for (let i = 0; i < newertimes.length; i++){\n                  var data2 = newertimes[i];\n  \n                  var start2 = data2[0];\n                  var end2 = data2[1];\n  \n                  if (curend > start2){\n                    if (curend < end2) {\n                      let newtime = [curstart, end2];\n                      newesttimes.push(newtime);\n                      removedtimes.push([curstart,curend]);\n                      removedtimes.push([start2, end2]);\n                    }\n                  }\n            }\n          }\n  \n              // STEP 3 printing results\n              for (let k=0; k<newesttimes.length; k++){\n                data = newesttimes[k];\n                let start = data[0];\n                let end = data[1];\n  \n                let start2 = new Date(start).toLocaleString('en-US', { timeZone: 'EST' });\n                let end2 = new Date(end).toLocaleString('en-US', { timeZone: 'EST' });\n  \n              }\n  \n              // more printing results\n              for (let k=0; k<removedtimes.length; k++){\n                data = removedtimes[k];\n                let start = data[0];\n                let end = data[1];\n  \n                let start2 = new Date(start).toLocaleString('en-US', { timeZone: 'EST' });\n                let end2 = new Date(end).toLocaleString('en-US', { timeZone: 'EST' });\n              }\n  \n            // Adding consolidated times together, finishing up etc\n            var finaltimes = [];\n            for (let k=0; k < newertimes.length; k++){\n              data = newertimes[k];\n              let start = data[0];\n              let end = data[1];\n  \n              var shouldWeAddIt = true;\n  \n              for (let x=0; x < removedtimes.length; x++){\n                    let data2 = removedtimes[x];\n                    let start2 = data2[0];\n                    let end2 = data2[1];\n  \n                    if (start2 == start) {\n                      if (end2 == end) {\n                        shouldWeAddIt = false;\n                      }\n                      }\n                }\n  \n              if (shouldWeAddIt == true) {\n                finaltimes.push(data);\n              }\n           }\n  \n         for (let k=0; k<finaltimes.length; k++){\n           data = finaltimes[k];\n           let start = data[0];\n           let end = data[1];\n  \n           let start2 = new Date(start).toLocaleString('en-US', { timeZone: 'EST' });\n           let end2 = new Date(end).toLocaleString('en-US', { timeZone: 'EST' });\n  \n         }\n  \n         for (let k=0; k<newesttimes.length; k++){\n           let data = newesttimes[k];\n           finaltimes.push(data);\n         }\n  \n         for (let k=0; k<finaltimes.length; k++){\n           data = finaltimes[k];\n           let start = data[0];\n           let end = data[1];\n  \n           let start2 = new Date(start).toLocaleString('en-US', { timeZone: 'EST' });\n           let end2 = new Date(end).toLocaleString('en-US', { timeZone: 'EST' });\n  \n         }\n  \n         var allstarttimes3 = [];\n         var allendtimes3 = [];\n         for (let k=0; k<finaltimes.length; k++){\n           data = finaltimes[k];\n           let start = data[0];\n           let end = data[1];\n  \n           allstarttimes3.push(start);\n           allendtimes3.push(end);\n         }\n  \n        allstarttimes3.sort(function(a, b){return a-b});\n        allendtimes3.sort(function(a, b){return a-b});\n  \n        var finalmasterArray = [];\n  \n          for (let x = 0; x < allstarttimes3.length; x++){\n            let startTime = allstarttimes3[x];\n            let endTime = allendtimes3[x];\n  \n            let timeStartDateFormat = new Date(startTime);\n            let timeEndDateFormat = new Date(endTime);\n  \n            let prettyStartTime = timeStartDateFormat.toLocaleString('en-US', { timeZone: 'EST' });\n            let prettyEndTime = timeEndDateFormat.toLocaleString('en-US', { timeZone: 'EST' });\n  \n            let timecombo = [timeStartDateFormat, timeEndDateFormat];\n            finalmasterArray.push(timecombo);\n          }\n  \n          printPrettyTimeslots(allstarttimes3, allendtimes3, finalmasterArray);\n  \n    }\n\n    function printPrettyTimeslots(allstarttimes3, allendtimes3, finalmasterArray){\n        var awesomeArray = [];\n        let diff = ''\n        let beginfreeslot = ''\n        let endfreeslot = ''\n        let prettyStart = ''\n        let prettyEnd = ''\n        let prettyStartTime = ''\n        let prettyEndTime = ''\n        let splitStart = ''\n        let splitEnd = ''\n        let ogStart = ''\n        let ogEnd = ''\n        for (let x = 0; x < finalmasterArray.length-1; x++){\n              var times = finalmasterArray[x];\n              var curstart = times[0];\n              var curend = times[1];\n    \n              var times = finalmasterArray[x+1];\n    \n              var nextstart = times[0];\n              var nextend = times[1];\n    \n    \n              if (x==0) {\n                // First element, subtract from 8am\n                let eightAm = new Date(curstart);\n    \n                eightAm.setHours(8);\n                eightAm.setMinutes(0);\n                eightAm.setSeconds(0);\n    \n                eightAm = eightAm.getTime();\n                eightAm = new Date(eightAm);\n    \n                let diff = curstart - eightAm;\n    \n                if ((diff > 0) && (diff < 36000000)) {\n                  let beginfreeslot = eightAm;\n                  eightAm = eightAm.getTime();\n                  let endfreeslot = eightAm + diff;\n                  let prettyStart = new Date(beginfreeslot);\n                  let prettyEnd = new Date(endfreeslot);\n    \n                  let prettyStartTime = prettyStart.toLocaleString('en-US', { timeZone: 'EST' });\n                  let prettyEndTime = prettyEnd.toLocaleString('en-US', { timeZone: 'EST' });\n    \n                  let splitStart = prettyStartTime.split(\" \");\n                  let splitEnd = prettyEndTime.split(\" \");\n    \n                  let ogStart = splitStart[1];\n                  let ogEnd = splitEnd[1];\n                  awesomeArray.push([prettyStart, prettyEnd]);\n                }\n    \n                diff = nextstart - curend;\n    \n                if ((diff > 0) && (diff < 36000000)) {\n                  let beginfreeslot = curend;\n                  let endfreeslot = nextstart + diff;\n                  let prettyStart = new Date(beginfreeslot);\n                  let prettyEnd = new Date(endfreeslot);\n    \n                  let prettyStartTime = prettyStart.toLocaleString('en-US', { timeZone: 'EST' });\n                  let prettyEndTime = prettyEnd.toLocaleString('en-US', { timeZone: 'EST' });\n    \n                  let splitStart = prettyStartTime.split(\" \");\n                  let splitEnd = prettyEndTime.split(\" \");\n    \n                  let ogStart = splitStart[1];\n                  let ogEnd = splitEnd[1];\n                  awesomeArray.push([prettyStart, prettyEnd]);\n                }\n    \n              }\n    \n              else if (x == finalmasterArray.length-2){\n                diff = nextstart - curend;\n    \n                  if ((diff > 0) && (diff < 36000000)) {\n                  let beginfreeslot = curend;\n                  let endfreeslot = nextstart + diff;\n                  let prettyStart = new Date(beginfreeslot);\n                  let prettyEnd = new Date(endfreeslot);\n    \n                  let prettyStartTime = prettyStart.toLocaleString('en-US', { timeZone: 'EST' });\n                  let prettyEndTime = prettyEnd.toLocaleString('en-US', { timeZone: 'EST' });\n    \n                  let splitStart = prettyStartTime.split(\" \");\n                  let splitEnd = prettyEndTime.split(\" \");\n    \n                  let ogStart = splitStart[1];\n                  let ogEnd = splitEnd[1];\n                  awesomeArray.push([prettyStart, prettyEnd]);\n                }\n    \n                // Proceed to add final end of day -> 8 pm time slot\n                let sevenPm = new Date(curend);\n    \n                sevenPm.setHours(8+12);\n                sevenPm.setMinutes(0);\n                sevenPm.setSeconds(0);\n    \n                nextend = nextend.getTime()\n    \n                diff = sevenPm - nextend;\n    \n                if ((diff > 0) && (diff < 36000000)) {\n                  // nextend = nextend.getTime()\n                  beginfreeslot = nextend;\n                  endfreeslot = nextend + diff;\n    \n                  prettyStart = new Date(beginfreeslot);\n                  prettyEnd = new Date(endfreeslot);\n    \n                  prettyStartTime = prettyStart.toLocaleString('en-US', { timeZone: 'EST' });\n                  prettyEndTime = prettyEnd.toLocaleString('en-US', { timeZone: 'EST' });\n    \n                  splitStart = prettyStartTime.split(\" \");\n                  splitEnd = prettyEndTime.split(\" \");\n    \n                  ogStart = splitStart[1];\n                  ogEnd = splitEnd[1];\n                  awesomeArray.push([prettyStart, prettyEnd]);\n                }\n    \n    \n              }\n              else {\n                  let diff = nextstart - curend;\n    \n                  if ((diff > 0) && (diff < 36000000)) {\n                    beginfreeslot = curend;\n                    endfreeslot = nextstart + diff;\n                    prettyStart = new Date(beginfreeslot);\n                    prettyEnd = new Date(endfreeslot);\n    \n                    prettyStartTime = prettyStart.toLocaleString('en-US', { timeZone: 'EST' });\n                    prettyEndTime = prettyEnd.toLocaleString('en-US', { timeZone: 'EST' });\n    \n                    splitStart = prettyStartTime.split(\" \");\n                    splitEnd = prettyEndTime.split(\" \");\n    \n                    ogStart = splitStart[1];\n                    ogEnd = splitEnd[1];\n                    awesomeArray.push([prettyStart, prettyEnd]);\n                  }\n                }\n        }\n    \n        // Remove old elements in list\n        console.log(\"awesome array\")\n        console.log(awesomeArray)\n        var finalArr = []\n        for (let x = 0; x < awesomeArray.length; x++){\n          var times = awesomeArray[x];\n          var curstart = times[0];\n          curstart = new Date(curstart.setHours(curstart.getHours() + 0))\n          var curend = times[1];\n          curend = new Date(curend.setHours(curend.getHours() + 0))\n\n          var comb = [curstart, curend]\n          finalArr.push(comb)\n    \n          let curstartString = String(curstart);\n          let curendString = String(curend);\n\n          let startstring = curstart.toLocaleString('en-US', { timeZone: 'EST',  timeStyle: \"short\", dateStyle: \"short\" });\n          let endstring = curend.toLocaleString('en-US', { timeZone: 'EST',  timeStyle: \"short\", dateStyle: \"short\" });\n    \n          let startstringsplit = curstartString.split(\" \");\n          let pretty_dayofweek = startstringsplit[0]\n          let month = curstart.getMonth() + 1;\n          let day = curstart.getDate();\n    \n          let startstringsplit2 = startstring.split(\" \");\n          let pretty_starttime = startstringsplit2[1] + \" \" + startstringsplit2[2];\n          let endstringsplit2 = endstring.split(\" \");\n          let pretty_endtime = endstringsplit2[1] + \" \" + endstringsplit2[2];\n    \n          let prettystring = (pretty_dayofweek + \" \" + month + \"/\" + day + \": \" + pretty_starttime + \" to \" + pretty_endtime);\n          console.log(\"prettty\" + prettystring);\n    \n        }\n        console.log(finalArr)\n        setFreeTimes(finalArr)\n        finishUp(finalArr)\n    }\n\n    const unique_days = []\n    const finishUp = (finalArr) => {\n      // const unique_days = []\n      const temp = finalArr.map((obj, i, arr) => {\n        const xx = getDate(obj[0])\n        if (unique_days.includes(String(xx)) === false) {\n          unique_days.push(String(xx))\n        } else {\n          return 'ignore'\n        }\n      })\n\n      const motherToEndAll = []\n      for (let i=0; i<unique_days.length; i++) {\n        const thisDay = unique_days[i]\n        const dkl = new Date(thisDay)  \n        const hihi = dkl.toLocaleDateString()      \n        \n        const thisDayTimes = []\n        for (let j = 0; j < finalArr.length; j++) {\n          const dayObj = finalArr[j]\n          const firstTime = dayObj[0]\n          const secondTime = dayObj[1]\n          const startDay2 = removeTime(firstTime)\n\n          const freeTimeSlot = {}\n\n          if (String(startDay2) === String(thisDay)) {\n            const freeTimeSlot = []\n            const temp1 = String(dayObj[0].toLocaleString())\n            const splitted1 = temp1.split(\" \")\n\n            freeTimeSlot.start = String(splitted1[1] + \" \" + splitted1[2])\n\n            const temp = String(dayObj[1].toLocaleString())\n            const splitted = temp.split(\" \")\n\n            freeTimeSlot.end = String(splitted[1] + \" \" + splitted[2])\n            thisDayTimes.push(freeTimeSlot)\n          }\n\n        }\n\n        const finalDolphin = [hihi, thisDayTimes]\n        motherToEndAll.push(finalDolphin)\n      }\n\n  \n\n      console.log(\"hard yeet\")\n      console.log(motherToEndAll)\n      setFreeTimes(motherToEndAll)\n      props.setOutputReady(true)\n\n    }\n\n    function removeTime(date = new Date()) {\n      return new Date(date.toDateString());\n    }\n\n    const getDate = (inputDate) => {\n      const d = new Date(inputDate)\n      const dods = removeTime(d)\n      return dods\n  }\n\n\n     return (\n    <div className=\"todo-container\">\n          {props.outputReady ? (\n          <div>\n          {freeTimes.map(test => {\n                console.log(\"yoyoyoyo\")\n                const thisDate = test[0]\n                const thisDateTimeSlots = test[1]\n                        return (\n\n        <div>\n            <div>\n            <h2>{thisDate}:</h2>\n            <ul>\n                {thisDateTimeSlots.map(item => {\n                  console.log(\"item here\")\n                  console.log(item)\n                        return (\n                            <div>\n                            <li>{item.start} to {item.end}</li>\n                            {/* <p>Start time: {item.start}</p>\n                            <p>End time: {item.end}</p> */}\n                            </div>\n                            \n                            )\n                    })}\n              </ul>\n            </div>\n        </div>\n                        ) })}\n\n          </div>\n      ) : (\n\n        <button className=\"btn-upload\" onClick={fetchFreeTimes}> Fetch free times </button>\n         \n      )}\n    <br />\n    <br />\n\n    </div>\n\n     );\n}\n\nexport default CalendarOutput;"],"mappings":"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"},"metadata":{},"sourceType":"module"}